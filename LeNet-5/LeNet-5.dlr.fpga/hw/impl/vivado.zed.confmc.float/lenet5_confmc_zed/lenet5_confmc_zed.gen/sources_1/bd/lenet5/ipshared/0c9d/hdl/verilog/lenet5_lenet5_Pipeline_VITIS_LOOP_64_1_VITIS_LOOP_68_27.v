// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RFIFONUM,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        sext_ln64,
        f2_out_data_address0,
        f2_out_data_ce0,
        f2_out_data_q0,
        grp_fu_236_p_din0,
        grp_fu_236_p_din1,
        grp_fu_236_p_opcode,
        grp_fu_236_p_dout0,
        grp_fu_236_p_ce,
        grp_fu_244_p_din0,
        grp_fu_244_p_din1,
        grp_fu_244_p_dout0,
        grp_fu_244_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [31:0] m_axi_data_AWADDR;
output  [0:0] m_axi_data_AWID;
output  [31:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [0:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [31:0] m_axi_data_WDATA;
output  [3:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [0:0] m_axi_data_WID;
output  [0:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [31:0] m_axi_data_ARADDR;
output  [0:0] m_axi_data_ARID;
output  [31:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [0:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [31:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [0:0] m_axi_data_RID;
input  [8:0] m_axi_data_RFIFONUM;
input  [0:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [0:0] m_axi_data_BID;
input  [0:0] m_axi_data_BUSER;
input  [29:0] sext_ln64;
output  [6:0] f2_out_data_address0;
output   f2_out_data_ce0;
input  [31:0] f2_out_data_q0;
output  [31:0] grp_fu_236_p_din0;
output  [31:0] grp_fu_236_p_din1;
output  [1:0] grp_fu_236_p_opcode;
input  [31:0] grp_fu_236_p_dout0;
output   grp_fu_236_p_ce;
output  [31:0] grp_fu_244_p_din0;
output  [31:0] grp_fu_244_p_din1;
input  [31:0] grp_fu_244_p_dout0;
output   grp_fu_244_p_ce;

reg ap_idle;
reg m_axi_data_WVALID;
reg f2_out_data_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln64_reg_341;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] fc3_bias_address0;
reg    fc3_bias_ce0;
wire   [31:0] fc3_bias_q0;
wire   [9:0] fc3_weight_address0;
reg    fc3_weight_ce0;
wire   [31:0] fc3_weight_q0;
reg    data_blk_n_W;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_341_pp0_iter3_reg;
reg   [0:0] ifzero19_reg_370;
reg   [0:0] ifzero19_reg_370_pp0_iter3_reg;
reg   [31:0] reg_149;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
reg    ap_predicate_op96_write_state20;
reg    ap_block_state20_io;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln64_reg_341_pp0_iter2_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ifzero19_reg_370_pp0_iter2_reg;
wire   [0:0] icmp_ln64_fu_181_p2;
reg   [0:0] icmp_ln64_reg_341_pp0_iter1_reg;
wire   [0:0] icmp_ln68_fu_205_p2;
reg   [0:0] icmp_ln68_reg_345;
reg   [0:0] icmp_ln68_reg_345_pp0_iter1_reg;
wire   [6:0] select_ln68_fu_211_p3;
reg   [6:0] select_ln68_reg_350;
wire   [3:0] select_ln68_2_fu_219_p3;
reg   [3:0] select_ln68_2_reg_355;
reg   [3:0] select_ln68_2_reg_355_pp0_iter1_reg;
wire   [0:0] ifzero19_fu_242_p2;
reg   [0:0] ifzero19_reg_370_pp0_iter1_reg;
reg   [31:0] pX_load_reg_374;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] pW_load_reg_389;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] select_ln68_1_fu_273_p3;
reg   [31:0] select_ln68_1_reg_394;
reg   [31:0] mul20_i2_reg_399;
reg   [31:0] fc3_bias_load_reg_409;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_block_pp0_stage1_subdone;
wire   [31:0] zext_ln69_fu_231_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln70_fu_266_p1;
wire    ap_block_pp0_stage3;
wire   [31:0] zext_ln68_fu_280_p1;
wire    ap_block_pp0_stage1_01001;
reg   [31:0] sum_fu_72;
reg   [31:0] ap_sig_allocacmp_sum_load;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [6:0] i_fu_76;
wire   [6:0] add_ln68_fu_236_p2;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [3:0] o_fu_80;
reg   [3:0] ap_sig_allocacmp_o_load;
reg   [9:0] indvar_flatten26_fu_84;
wire   [9:0] add_ln64_fu_187_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten26_load;
reg   [31:0] grp_fu_141_p0;
reg   [31:0] grp_fu_141_p1;
wire    ap_block_pp0_stage5;
wire   [3:0] add_ln64_1_fu_199_p2;
wire   [9:0] grp_fu_299_p3;
wire   [3:0] grp_fu_299_p0;
wire   [6:0] grp_fu_299_p1;
wire   [6:0] grp_fu_299_p2;
reg    grp_fu_141_ce;
reg    ap_predicate_op85_fadd_state15;
wire    ap_block_pp0_stage5_11001;
reg    grp_fu_145_ce;
reg    grp_fu_299_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage2_00001;
wire   [9:0] grp_fu_299_p00;
wire   [9:0] grp_fu_299_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27_fc3_bias_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc3_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_bias_address0),
    .ce0(fc3_bias_ce0),
    .q0(fc3_bias_q0)
);

lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27_fc3_weight_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 840 ),
    .AddressWidth( 10 ))
fc3_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_weight_address0),
    .ce0(fc3_weight_ce0),
    .q0(fc3_weight_q0)
);

lenet5_mac_muladd_4ns_7ns_7ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 10 ))
mac_muladd_4ns_7ns_7ns_10_4_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_299_p0),
    .din1(grp_fu_299_p1),
    .din2(grp_fu_299_p2),
    .ce(grp_fu_299_ce),
    .dout(grp_fu_299_p3)
);

lenet5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter3_stage0) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_fu_181_p2 == 1'd0))) begin
            i_fu_76 <= add_ln68_fu_236_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_fu_181_p2 == 1'd0))) begin
            indvar_flatten26_fu_84 <= add_ln64_fu_187_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten26_fu_84 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_fu_181_p2 == 1'd0))) begin
            o_fu_80 <= select_ln68_2_fu_219_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            o_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_fu_72 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd0))) begin
        sum_fu_72 <= reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd0))) begin
        fc3_bias_load_reg_409 <= fc3_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_341 <= icmp_ln64_fu_181_p2;
        icmp_ln64_reg_341_pp0_iter1_reg <= icmp_ln64_reg_341;
        icmp_ln64_reg_341_pp0_iter2_reg <= icmp_ln64_reg_341_pp0_iter1_reg;
        icmp_ln64_reg_341_pp0_iter3_reg <= icmp_ln64_reg_341_pp0_iter2_reg;
        icmp_ln68_reg_345_pp0_iter1_reg <= icmp_ln68_reg_345;
        ifzero19_reg_370_pp0_iter1_reg <= ifzero19_reg_370;
        ifzero19_reg_370_pp0_iter2_reg <= ifzero19_reg_370_pp0_iter1_reg;
        ifzero19_reg_370_pp0_iter3_reg <= ifzero19_reg_370_pp0_iter2_reg;
        select_ln68_2_reg_355_pp0_iter1_reg <= select_ln68_2_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln68_reg_345 <= icmp_ln68_fu_205_p2;
        ifzero19_reg_370 <= ifzero19_fu_242_p2;
        select_ln68_2_reg_355 <= select_ln68_2_fu_219_p3;
        select_ln68_reg_350 <= select_ln68_fu_211_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln64_reg_341_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul20_i2_reg_399 <= grp_fu_244_p_dout0;
        select_ln68_1_reg_394 <= select_ln68_1_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_341 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        pW_load_reg_389 <= fc3_weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_341 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pX_load_reg_374 <= f2_out_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ifzero19_reg_370_pp0_iter2_reg == 1'd1) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd0)))) begin
        reg_149 <= grp_fu_236_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_341 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten26_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten26_load = indvar_flatten26_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_o_load = 4'd0;
    end else begin
        ap_sig_allocacmp_o_load = o_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd0))) begin
        ap_sig_allocacmp_sum_load = reg_149;
    end else begin
        ap_sig_allocacmp_sum_load = sum_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ifzero19_reg_370_pp0_iter3_reg == 1'd1) & (icmp_ln64_reg_341_pp0_iter3_reg == 1'd0))) begin
        data_blk_n_W = m_axi_data_WREADY;
    end else begin
        data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f2_out_data_ce0 = 1'b1;
    end else begin
        f2_out_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc3_bias_ce0 = 1'b1;
    end else begin
        fc3_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fc3_weight_ce0 = 1'b1;
    end else begin
        fc3_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_141_ce = 1'b1;
    end else begin
        grp_fu_141_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_141_p0 = reg_149;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_141_p0 = select_ln68_1_reg_394;
    end else begin
        grp_fu_141_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_141_p1 = fc3_bias_load_reg_409;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_141_p1 = mul20_i2_reg_399;
    end else begin
        grp_fu_141_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_145_ce = 1'b1;
    end else begin
        grp_fu_145_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_299_ce = 1'b1;
    end else begin
        grp_fu_299_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op96_write_state20 == 1'b1))) begin
        m_axi_data_WVALID = 1'b1;
    end else begin
        m_axi_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_1_fu_199_p2 = (ap_sig_allocacmp_o_load + 4'd1);

assign add_ln64_fu_187_p2 = (ap_sig_allocacmp_indvar_flatten26_load + 10'd1);

assign add_ln68_fu_236_p2 = (select_ln68_fu_211_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state20_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state20_io));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((m_axi_data_WREADY == 1'b0) & (ap_predicate_op96_write_state20 == 1'b1));
end

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

always @ (*) begin
    ap_predicate_op85_fadd_state15 = ((ifzero19_reg_370_pp0_iter2_reg == 1'd1) & (icmp_ln64_reg_341_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op96_write_state20 = ((ifzero19_reg_370_pp0_iter3_reg == 1'd1) & (icmp_ln64_reg_341_pp0_iter3_reg == 1'd0));
end

assign f2_out_data_address0 = zext_ln69_fu_231_p1;

assign fc3_bias_address0 = zext_ln68_fu_280_p1;

assign fc3_weight_address0 = zext_ln70_fu_266_p1;

assign grp_fu_236_p_ce = grp_fu_141_ce;

assign grp_fu_236_p_din0 = grp_fu_141_p0;

assign grp_fu_236_p_din1 = grp_fu_141_p1;

assign grp_fu_236_p_opcode = 2'd0;

assign grp_fu_244_p_ce = grp_fu_145_ce;

assign grp_fu_244_p_din0 = pX_load_reg_374;

assign grp_fu_244_p_din1 = pW_load_reg_389;

assign grp_fu_299_p0 = grp_fu_299_p00;

assign grp_fu_299_p00 = select_ln68_2_fu_219_p3;

assign grp_fu_299_p1 = 10'd84;

assign grp_fu_299_p2 = grp_fu_299_p20;

assign grp_fu_299_p20 = select_ln68_reg_350;

assign icmp_ln64_fu_181_p2 = ((ap_sig_allocacmp_indvar_flatten26_load == 10'd840) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_205_p2 = ((ap_sig_allocacmp_i_load == 7'd84) ? 1'b1 : 1'b0);

assign ifzero19_fu_242_p2 = ((add_ln68_fu_236_p2 == 7'd84) ? 1'b1 : 1'b0);

assign m_axi_data_ARADDR = 32'd0;

assign m_axi_data_ARBURST = 2'd0;

assign m_axi_data_ARCACHE = 4'd0;

assign m_axi_data_ARID = 1'd0;

assign m_axi_data_ARLEN = 32'd0;

assign m_axi_data_ARLOCK = 2'd0;

assign m_axi_data_ARPROT = 3'd0;

assign m_axi_data_ARQOS = 4'd0;

assign m_axi_data_ARREGION = 4'd0;

assign m_axi_data_ARSIZE = 3'd0;

assign m_axi_data_ARUSER = 1'd0;

assign m_axi_data_ARVALID = 1'b0;

assign m_axi_data_AWADDR = 32'd0;

assign m_axi_data_AWBURST = 2'd0;

assign m_axi_data_AWCACHE = 4'd0;

assign m_axi_data_AWID = 1'd0;

assign m_axi_data_AWLEN = 32'd0;

assign m_axi_data_AWLOCK = 2'd0;

assign m_axi_data_AWPROT = 3'd0;

assign m_axi_data_AWQOS = 4'd0;

assign m_axi_data_AWREGION = 4'd0;

assign m_axi_data_AWSIZE = 3'd0;

assign m_axi_data_AWUSER = 1'd0;

assign m_axi_data_AWVALID = 1'b0;

assign m_axi_data_BREADY = 1'b0;

assign m_axi_data_RREADY = 1'b0;

assign m_axi_data_WDATA = reg_149;

assign m_axi_data_WID = 1'd0;

assign m_axi_data_WLAST = 1'b0;

assign m_axi_data_WSTRB = 4'd15;

assign m_axi_data_WUSER = 1'd0;

assign select_ln68_1_fu_273_p3 = ((icmp_ln68_reg_345_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_sum_load);

assign select_ln68_2_fu_219_p3 = ((icmp_ln68_fu_205_p2[0:0] == 1'b1) ? add_ln64_1_fu_199_p2 : ap_sig_allocacmp_o_load);

assign select_ln68_fu_211_p3 = ((icmp_ln68_fu_205_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_i_load);

assign zext_ln68_fu_280_p1 = select_ln68_2_reg_355_pp0_iter1_reg;

assign zext_ln69_fu_231_p1 = select_ln68_fu_211_p3;

assign zext_ln70_fu_266_p1 = grp_fu_299_p3;

endmodule //lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27
