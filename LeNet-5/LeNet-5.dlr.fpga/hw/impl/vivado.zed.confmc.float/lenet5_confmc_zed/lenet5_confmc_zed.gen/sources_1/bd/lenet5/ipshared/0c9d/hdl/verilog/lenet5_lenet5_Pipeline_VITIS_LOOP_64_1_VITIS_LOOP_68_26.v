// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_26 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f1_out_data_address0,
        f1_out_data_ce0,
        f1_out_data_q0,
        f2_out_data_address0,
        f2_out_data_ce0,
        f2_out_data_we0,
        f2_out_data_d0,
        grp_fu_236_p_din0,
        grp_fu_236_p_din1,
        grp_fu_236_p_opcode,
        grp_fu_236_p_dout0,
        grp_fu_236_p_ce,
        grp_fu_244_p_din0,
        grp_fu_244_p_din1,
        grp_fu_244_p_dout0,
        grp_fu_244_p_ce,
        grp_fu_248_p_din0,
        grp_fu_248_p_din1,
        grp_fu_248_p_opcode,
        grp_fu_248_p_dout0,
        grp_fu_248_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] f1_out_data_address0;
output   f1_out_data_ce0;
input  [31:0] f1_out_data_q0;
output  [6:0] f2_out_data_address0;
output   f2_out_data_ce0;
output   f2_out_data_we0;
output  [31:0] f2_out_data_d0;
output  [31:0] grp_fu_236_p_din0;
output  [31:0] grp_fu_236_p_din1;
output  [1:0] grp_fu_236_p_opcode;
input  [31:0] grp_fu_236_p_dout0;
output   grp_fu_236_p_ce;
output  [31:0] grp_fu_244_p_din0;
output  [31:0] grp_fu_244_p_din1;
input  [31:0] grp_fu_244_p_dout0;
output   grp_fu_244_p_ce;
output  [31:0] grp_fu_248_p_din0;
output  [31:0] grp_fu_248_p_din1;
output  [4:0] grp_fu_248_p_opcode;
input  [0:0] grp_fu_248_p_dout0;
output   grp_fu_248_p_ce;

reg ap_idle;
reg f1_out_data_ce0;
reg f2_out_data_ce0;
reg f2_out_data_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln64_reg_408;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] fc2_bias_address0;
reg    fc2_bias_ce0;
wire   [31:0] fc2_bias_q0;
wire   [13:0] fc2_weight_address0;
reg    fc2_weight_ce0;
wire   [31:0] fc2_weight_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_191_p2;
reg   [0:0] icmp_ln64_reg_408_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln68_fu_212_p2;
reg   [0:0] icmp_ln68_reg_412;
wire   [6:0] select_ln62_3_fu_226_p3;
reg   [6:0] select_ln62_3_reg_417;
wire   [13:0] add_ln70_fu_277_p2;
reg   [13:0] add_ln70_reg_427;
wire   [0:0] ifzero6_fu_289_p2;
reg   [0:0] ifzero6_reg_432;
reg   [0:0] ifzero6_reg_432_pp0_iter1_reg;
reg   [0:0] ifzero6_reg_432_pp0_iter2_reg;
reg   [0:0] ifzero6_reg_432_pp0_iter3_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] pX_load_reg_441;
reg   [31:0] pW_load_reg_446;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] select_ln62_fu_317_p3;
reg   [31:0] select_ln62_reg_451;
wire   [31:0] zext_ln62_fu_324_p1;
reg   [31:0] zext_ln62_reg_456;
reg   [31:0] zext_ln62_reg_456_pp0_iter2_reg;
reg   [31:0] zext_ln62_reg_456_pp0_iter3_reg;
reg   [31:0] mul20_i1_reg_466;
reg   [31:0] fc2_bias_load_reg_471;
reg   [31:0] sum_2_reg_476;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] add22_i1_reg_482;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] select_ln74_fu_373_p3;
reg   [31:0] select_ln74_reg_489;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [31:0] zext_ln68_1_fu_268_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln70_fu_310_p1;
wire    ap_block_pp0_stage1;
reg   [6:0] i_fu_58;
wire   [6:0] i_1_fu_283_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [31:0] sum_fu_62;
reg   [31:0] ap_sig_allocacmp_sum_load;
reg   [6:0] o_fu_66;
reg   [6:0] ap_sig_allocacmp_o_1;
reg   [13:0] indvar_flatten13_fu_70;
wire   [13:0] add_ln64_2_fu_197_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten13_load;
reg   [31:0] grp_fu_126_p0;
reg   [31:0] grp_fu_126_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage5;
wire   [9:0] p_shl1_fu_173_p3;
wire   [13:0] p_shl_fu_165_p3;
wire   [13:0] p_shl1_cast_fu_181_p1;
wire   [6:0] add_ln64_fu_206_p2;
wire   [9:0] p_shl1_mid1_fu_242_p3;
wire   [13:0] p_shl_mid1_fu_234_p3;
wire   [13:0] p_shl1_cast_mid1_fu_250_p1;
wire   [13:0] p_mid1_fu_254_p2;
wire   [13:0] empty_fu_185_p2;
wire   [6:0] select_ln62_1_fu_218_p3;
wire   [13:0] select_ln62_4_fu_260_p3;
wire   [13:0] zext_ln68_fu_273_p1;
wire   [31:0] bitcast_ln74_fu_332_p1;
wire   [7:0] tmp_2_fu_335_p4;
wire   [22:0] trunc_ln74_fu_345_p1;
wire   [0:0] icmp_ln74_1_fu_355_p2;
wire   [0:0] icmp_ln74_fu_349_p2;
wire   [0:0] or_ln74_fu_361_p2;
wire   [0:0] and_ln74_fu_367_p2;
wire    ap_block_pp0_stage5_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_26_fc2_bias_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc2_bias_address0),
    .ce0(fc2_bias_ce0),
    .q0(fc2_bias_q0)
);

lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_26_fc2_weight_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 10080 ),
    .AddressWidth( 14 ))
fc2_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc2_weight_address0),
    .ce0(fc2_weight_ce0),
    .q0(fc2_weight_q0)
);

lenet5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_fu_191_p2 == 1'd0))) begin
            i_fu_58 <= i_1_fu_283_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_fu_191_p2 == 1'd0))) begin
            indvar_flatten13_fu_70 <= add_ln64_2_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_fu_191_p2 == 1'd0))) begin
            o_fu_66 <= select_ln62_3_fu_226_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            o_fu_66 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sum_fu_62 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            sum_fu_62 <= sum_2_reg_476;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ifzero6_reg_432_pp0_iter2_reg == 1'd1))) begin
        add22_i1_reg_482 <= grp_fu_236_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_191_p2 == 1'd0))) begin
        add_ln70_reg_427 <= add_ln70_fu_277_p2;
        icmp_ln68_reg_412 <= icmp_ln68_fu_212_p2;
        ifzero6_reg_432 <= ifzero6_fu_289_p2;
        select_ln62_3_reg_417 <= select_ln62_3_fu_226_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fc2_bias_load_reg_471 <= fc2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_408 <= icmp_ln64_fu_191_p2;
        icmp_ln64_reg_408_pp0_iter1_reg <= icmp_ln64_reg_408;
        icmp_ln64_reg_408_pp0_iter2_reg <= icmp_ln64_reg_408_pp0_iter1_reg;
        ifzero6_reg_432_pp0_iter1_reg <= ifzero6_reg_432;
        ifzero6_reg_432_pp0_iter2_reg <= ifzero6_reg_432_pp0_iter1_reg;
        ifzero6_reg_432_pp0_iter3_reg <= ifzero6_reg_432_pp0_iter2_reg;
        mul20_i1_reg_466 <= grp_fu_244_p_dout0;
        select_ln62_reg_451 <= select_ln62_fu_317_p3;
        zext_ln62_reg_456[6 : 0] <= zext_ln62_fu_324_p1[6 : 0];
        zext_ln62_reg_456_pp0_iter2_reg[6 : 0] <= zext_ln62_reg_456[6 : 0];
        zext_ln62_reg_456_pp0_iter3_reg[6 : 0] <= zext_ln62_reg_456_pp0_iter2_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pW_load_reg_446 <= fc2_weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pX_load_reg_441 <= f1_out_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ifzero6_reg_432_pp0_iter2_reg == 1'd1))) begin
        select_ln74_reg_489 <= select_ln74_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        sum_2_reg_476 <= grp_fu_236_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_408 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln64_reg_408_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_o_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_o_1 = o_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sum_load = sum_2_reg_476;
    end else begin
        ap_sig_allocacmp_sum_load = sum_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f1_out_data_ce0 = 1'b1;
    end else begin
        f1_out_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        f2_out_data_ce0 = 1'b1;
    end else begin
        f2_out_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ifzero6_reg_432_pp0_iter3_reg == 1'd1))) begin
        f2_out_data_we0 = 1'b1;
    end else begin
        f2_out_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc2_bias_ce0 = 1'b1;
    end else begin
        fc2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fc2_weight_ce0 = 1'b1;
    end else begin
        fc2_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_126_p0 = sum_2_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_126_p0 = select_ln62_reg_451;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_126_p1 = fc2_bias_load_reg_471;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_126_p1 = mul20_i1_reg_466;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_2_fu_197_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 14'd1);

assign add_ln64_fu_206_p2 = (ap_sig_allocacmp_o_1 + 7'd1);

assign add_ln70_fu_277_p2 = (select_ln62_4_fu_260_p3 + zext_ln68_fu_273_p1);

assign and_ln74_fu_367_p2 = (or_ln74_fu_361_p2 & grp_fu_248_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign bitcast_ln74_fu_332_p1 = add22_i1_reg_482;

assign empty_fu_185_p2 = (p_shl_fu_165_p3 - p_shl1_cast_fu_181_p1);

assign f1_out_data_address0 = zext_ln68_1_fu_268_p1;

assign f2_out_data_address0 = zext_ln62_reg_456_pp0_iter3_reg;

assign f2_out_data_d0 = select_ln74_reg_489;

assign fc2_bias_address0 = zext_ln62_fu_324_p1;

assign fc2_weight_address0 = zext_ln70_fu_310_p1;

assign grp_fu_236_p_ce = 1'b1;

assign grp_fu_236_p_din0 = grp_fu_126_p0;

assign grp_fu_236_p_din1 = grp_fu_126_p1;

assign grp_fu_236_p_opcode = 2'd0;

assign grp_fu_244_p_ce = 1'b1;

assign grp_fu_244_p_din0 = pX_load_reg_441;

assign grp_fu_244_p_din1 = pW_load_reg_446;

assign grp_fu_248_p_ce = 1'b1;

assign grp_fu_248_p_din0 = add22_i1_reg_482;

assign grp_fu_248_p_din1 = 32'd0;

assign grp_fu_248_p_opcode = 5'd5;

assign i_1_fu_283_p2 = (select_ln62_1_fu_218_p3 + 7'd1);

assign icmp_ln64_fu_191_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 14'd10080) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_212_p2 = ((ap_sig_allocacmp_i_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_355_p2 = ((trunc_ln74_fu_345_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_349_p2 = ((tmp_2_fu_335_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ifzero6_fu_289_p2 = ((i_1_fu_283_p2 == 7'd120) ? 1'b1 : 1'b0);

assign or_ln74_fu_361_p2 = (icmp_ln74_fu_349_p2 | icmp_ln74_1_fu_355_p2);

assign p_mid1_fu_254_p2 = (p_shl_mid1_fu_234_p3 - p_shl1_cast_mid1_fu_250_p1);

assign p_shl1_cast_fu_181_p1 = p_shl1_fu_173_p3;

assign p_shl1_cast_mid1_fu_250_p1 = p_shl1_mid1_fu_242_p3;

assign p_shl1_fu_173_p3 = {{ap_sig_allocacmp_o_1}, {3'd0}};

assign p_shl1_mid1_fu_242_p3 = {{add_ln64_fu_206_p2}, {3'd0}};

assign p_shl_fu_165_p3 = {{ap_sig_allocacmp_o_1}, {7'd0}};

assign p_shl_mid1_fu_234_p3 = {{add_ln64_fu_206_p2}, {7'd0}};

assign select_ln62_1_fu_218_p3 = ((icmp_ln68_fu_212_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_i_load);

assign select_ln62_3_fu_226_p3 = ((icmp_ln68_fu_212_p2[0:0] == 1'b1) ? add_ln64_fu_206_p2 : ap_sig_allocacmp_o_1);

assign select_ln62_4_fu_260_p3 = ((icmp_ln68_fu_212_p2[0:0] == 1'b1) ? p_mid1_fu_254_p2 : empty_fu_185_p2);

assign select_ln62_fu_317_p3 = ((icmp_ln68_reg_412[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_sum_load);

assign select_ln74_fu_373_p3 = ((and_ln74_fu_367_p2[0:0] == 1'b1) ? 32'd0 : add22_i1_reg_482);

assign tmp_2_fu_335_p4 = {{bitcast_ln74_fu_332_p1[30:23]}};

assign trunc_ln74_fu_345_p1 = bitcast_ln74_fu_332_p1[22:0];

assign zext_ln62_fu_324_p1 = select_ln62_3_reg_417;

assign zext_ln68_1_fu_268_p1 = select_ln62_1_fu_218_p3;

assign zext_ln68_fu_273_p1 = select_ln62_1_fu_218_p3;

assign zext_ln70_fu_310_p1 = add_ln70_reg_427;

always @ (posedge ap_clk) begin
    zext_ln62_reg_456[31:7] <= 25'b0000000000000000000000000;
    zext_ln62_reg_456_pp0_iter2_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln62_reg_456_pp0_iter3_reg[31:7] <= 25'b0000000000000000000000000;
end

endmodule //lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_26
