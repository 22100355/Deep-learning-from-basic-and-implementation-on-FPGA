-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet5_Pooling2dMax_float_1_0_1036831949u_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p1_out_data_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p1_out_data_ce0 : OUT STD_LOGIC;
    p1_out_data_we0 : OUT STD_LOGIC;
    p1_out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_data_ce1 : OUT STD_LOGIC;
    in_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address2 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_data_ce2 : OUT STD_LOGIC;
    in_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address3 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_data_ce3 : OUT STD_LOGIC;
    in_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_248_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_248_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_248_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_248_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_248_p_ce : OUT STD_LOGIC;
    grp_fu_252_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_252_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_252_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_252_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_252_p_ce : OUT STD_LOGIC;
    grp_fu_256_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_256_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_256_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_256_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_256_p_ce : OUT STD_LOGIC;
    grp_fu_260_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_260_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_260_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_260_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_260_p_ce : OUT STD_LOGIC;
    grp_fu_264_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_264_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_264_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_264_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_264_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet5_Pooling2dMax_float_1_0_1036831949u_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_C37F0000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011011111110000000000000000";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_1C : STD_LOGIC_VECTOR (10 downto 0) := "00000011100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv12_310 : STD_LOGIC_VECTOR (11 downto 0) := "001100010000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln96_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ch_1_reg_1262 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_1_reg_1262_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_1_reg_1262_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_1_reg_1262_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln96_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1268_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1268_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1268_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln96_fu_260_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln96_reg_1272 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln96_reg_1272_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln96_reg_1272_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln96_reg_1272_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln97_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1278_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1278_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1278_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_load_reg_1295 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln98_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln97_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln97_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln97_reg_1305_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln97_7_fu_340_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln97_7_reg_1314 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln97_7_reg_1314_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_reg_1324 : STD_LOGIC_VECTOR (4 downto 0);
    signal g_1_reg_1331 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln97_fu_401_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln97_reg_1336 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln97_1_fu_407_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln97_1_reg_1341 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1205_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_89_reg_1348 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_fu_834_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln113_reg_1373_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal in_data_load_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_reg_1378_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_1_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_1_reg_1385_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_1_reg_1385_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_1_reg_1385_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_2_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_2_reg_1392_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_2_reg_1392_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_2_reg_1392_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_2_reg_1392_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_2_reg_1392_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_3_reg_1399_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_fu_881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_reg_1406_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_1_fu_970_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_1_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_1_reg_1413_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_2_fu_1058_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_2_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_2_reg_1420_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_3_fu_1146_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_3_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_3_reg_1427_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln113_fu_1193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln113_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal zext_ln106_1_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln106_2_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln106_3_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln106_4_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_1_fu_1201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln98_1_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln98_fu_359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (3 downto 0);
    signal r_fu_100 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln97_13_fu_420_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal g_fu_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln97_12_fu_413_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln97_14_fu_290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ch_fu_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln97_3_fu_272_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_ch_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten75_fu_116 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln96_1_fu_251_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten75_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln97_2_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln97_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln97_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln97_8_fu_347_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln97_fu_387_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln97_1_fu_394_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_437_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_fu_448_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln97_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_81_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_82_fu_474_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_fu_486_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_478_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_494_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_504_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_0_cast_fu_511_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_0_cast_fu_522_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_84_fu_532_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl7_1_fu_537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_1_fu_549_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_1_cast_fu_545_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_1_cast_fu_557_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_mid1_fu_567_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_mid1_fu_578_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_mid1_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_mid1_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid121_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_87_fu_602_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_mid_fu_614_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_mid_fu_606_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_mid139_fu_622_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln100_1_fu_626_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln100_fu_498_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_83_fu_526_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_85_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln97_2_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln97_2_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid1_fu_656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_88_fu_662_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_mid1_fu_674_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_mid1_fu_666_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_mid1_fu_682_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln100_2_fu_686_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln97_4_fu_632_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_0_mid1_fu_699_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_0_mid1_fu_710_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_0_cast_mid1_fu_706_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_0_cast_mid1_fu_717_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid15_fu_721_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln97_5_fu_639_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln97_10_fu_727_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid17_fu_738_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl7_1_mid1_fu_743_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_1_mid1_fu_755_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_1_cast_mid1_fu_751_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_1_cast_mid1_fu_763_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid19_fu_767_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln97_6_fu_646_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln97_11_fu_773_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln106_fu_784_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln97_10_cast_fu_734_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln106_fu_787_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln106_fu_798_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln97_11_cast_fu_780_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln106_1_fu_809_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln106_1_fu_820_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln113_fu_831_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln97_9_fu_692_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln107_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_843_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_fu_853_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_1_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_1_fu_888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln107_2_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_891_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_1_fu_901_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_3_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_2_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_908_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_2_fu_918_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_5_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_4_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_1_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_2_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_2_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_3_fu_976_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln107_4_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_979_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_3_fu_989_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_7_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_6_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_996_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_4_fu_1006_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_9_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_8_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_3_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_4_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_3_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_4_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_5_fu_1064_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln107_6_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1067_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_5_fu_1077_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_11_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_10_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1084_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_6_fu_1094_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_13_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_12_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_5_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_6_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_6_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln113_fu_1152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1155_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_fu_1165_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln113_1_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln113_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln113_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1205_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1205_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1205_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1205_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1205_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lenet5_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet5_mac_muladd_3ns_10ns_5ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component lenet5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_10ns_5ns_12_4_1_U49 : component lenet5_mac_muladd_3ns_10ns_5ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        din2_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1205_p0,
        din1 => grp_fu_1205_p1,
        din2 => grp_fu_1205_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1205_p3);

    flow_control_loop_pipe_sequential_init_U : component lenet5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_fu_92 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter1_reg = ap_const_lv1_0))) then 
                    c_fu_92 <= add_ln98_1_fu_365_p2;
                end if;
            end if; 
        end if;
    end process;

    ch_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_245_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ch_fu_112 <= select_ln97_3_fu_272_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ch_fu_112 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    g_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    g_fu_104 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter2_reg = ap_const_lv1_0))) then 
                    g_fu_104 <= select_ln97_12_fu_413_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten75_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_245_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten75_fu_116 <= add_ln96_1_fu_251_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten75_fu_116 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_245_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= select_ln97_14_fu_290_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    k_fu_96 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter1_reg = ap_const_lv1_0))) then 
                    k_fu_96 <= add_ln98_fu_359_p2;
                end if;
            end if; 
        end if;
    end process;

    r_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    r_fu_100 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter2_reg = ap_const_lv1_0))) then 
                    r_fu_100 <= select_ln97_13_fu_420_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_1268_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln113_reg_1373 <= add_ln113_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln113_reg_1373_pp0_iter10_reg <= add_ln113_reg_1373_pp0_iter9_reg;
                add_ln113_reg_1373_pp0_iter11_reg <= add_ln113_reg_1373_pp0_iter10_reg;
                add_ln113_reg_1373_pp0_iter12_reg <= add_ln113_reg_1373_pp0_iter11_reg;
                add_ln113_reg_1373_pp0_iter13_reg <= add_ln113_reg_1373_pp0_iter12_reg;
                add_ln113_reg_1373_pp0_iter14_reg <= add_ln113_reg_1373_pp0_iter13_reg;
                add_ln113_reg_1373_pp0_iter15_reg <= add_ln113_reg_1373_pp0_iter14_reg;
                add_ln113_reg_1373_pp0_iter5_reg <= add_ln113_reg_1373;
                add_ln113_reg_1373_pp0_iter6_reg <= add_ln113_reg_1373_pp0_iter5_reg;
                add_ln113_reg_1373_pp0_iter7_reg <= add_ln113_reg_1373_pp0_iter6_reg;
                add_ln113_reg_1373_pp0_iter8_reg <= add_ln113_reg_1373_pp0_iter7_reg;
                add_ln113_reg_1373_pp0_iter9_reg <= add_ln113_reg_1373_pp0_iter8_reg;
                add_ln96_reg_1272_pp0_iter2_reg <= add_ln96_reg_1272_pp0_iter1_reg;
                add_ln96_reg_1272_pp0_iter3_reg <= add_ln96_reg_1272_pp0_iter2_reg;
                and_ln97_reg_1305_pp0_iter3_reg <= and_ln97_reg_1305;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                ch_1_reg_1262_pp0_iter2_reg <= ch_1_reg_1262_pp0_iter1_reg;
                ch_1_reg_1262_pp0_iter3_reg <= ch_1_reg_1262_pp0_iter2_reg;
                g_1_reg_1331 <= g_fu_104;
                icmp_ln96_reg_1268_pp0_iter2_reg <= icmp_ln96_reg_1268_pp0_iter1_reg;
                icmp_ln96_reg_1268_pp0_iter3_reg <= icmp_ln96_reg_1268_pp0_iter2_reg;
                icmp_ln97_reg_1278_pp0_iter2_reg <= icmp_ln97_reg_1278_pp0_iter1_reg;
                icmp_ln97_reg_1278_pp0_iter3_reg <= icmp_ln97_reg_1278_pp0_iter2_reg;
                in_data_load_1_reg_1385_pp0_iter6_reg <= in_data_load_1_reg_1385;
                in_data_load_1_reg_1385_pp0_iter7_reg <= in_data_load_1_reg_1385_pp0_iter6_reg;
                in_data_load_1_reg_1385_pp0_iter8_reg <= in_data_load_1_reg_1385_pp0_iter7_reg;
                in_data_load_2_reg_1392_pp0_iter10_reg <= in_data_load_2_reg_1392_pp0_iter9_reg;
                in_data_load_2_reg_1392_pp0_iter6_reg <= in_data_load_2_reg_1392;
                in_data_load_2_reg_1392_pp0_iter7_reg <= in_data_load_2_reg_1392_pp0_iter6_reg;
                in_data_load_2_reg_1392_pp0_iter8_reg <= in_data_load_2_reg_1392_pp0_iter7_reg;
                in_data_load_2_reg_1392_pp0_iter9_reg <= in_data_load_2_reg_1392_pp0_iter8_reg;
                in_data_load_3_reg_1399_pp0_iter10_reg <= in_data_load_3_reg_1399_pp0_iter9_reg;
                in_data_load_3_reg_1399_pp0_iter11_reg <= in_data_load_3_reg_1399_pp0_iter10_reg;
                in_data_load_3_reg_1399_pp0_iter12_reg <= in_data_load_3_reg_1399_pp0_iter11_reg;
                in_data_load_3_reg_1399_pp0_iter6_reg <= in_data_load_3_reg_1399;
                in_data_load_3_reg_1399_pp0_iter7_reg <= in_data_load_3_reg_1399_pp0_iter6_reg;
                in_data_load_3_reg_1399_pp0_iter8_reg <= in_data_load_3_reg_1399_pp0_iter7_reg;
                in_data_load_3_reg_1399_pp0_iter9_reg <= in_data_load_3_reg_1399_pp0_iter8_reg;
                in_data_load_reg_1378_pp0_iter6_reg <= in_data_load_reg_1378;
                r_1_reg_1324 <= r_fu_100;
                select_ln107_1_reg_1413 <= select_ln107_1_fu_970_p3;
                select_ln107_1_reg_1413_pp0_iter10_reg <= select_ln107_1_reg_1413;
                select_ln107_2_reg_1420 <= select_ln107_2_fu_1058_p3;
                select_ln107_2_reg_1420_pp0_iter12_reg <= select_ln107_2_reg_1420;
                select_ln107_3_reg_1427 <= select_ln107_3_fu_1146_p3;
                select_ln107_3_reg_1427_pp0_iter14_reg <= select_ln107_3_reg_1427;
                select_ln107_reg_1406 <= select_ln107_fu_881_p3;
                select_ln107_reg_1406_pp0_iter8_reg <= select_ln107_reg_1406;
                select_ln113_reg_1433 <= select_ln113_fu_1193_p3;
                select_ln97_7_reg_1314_pp0_iter3_reg <= select_ln97_7_reg_1314;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln96_reg_1272 <= add_ln96_fu_260_p2;
                icmp_ln97_reg_1278 <= icmp_ln97_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln96_reg_1272_pp0_iter1_reg <= add_ln96_reg_1272;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ch_1_reg_1262 <= ap_sig_allocacmp_ch_1;
                ch_1_reg_1262_pp0_iter1_reg <= ch_1_reg_1262;
                icmp_ln96_reg_1268 <= icmp_ln96_fu_245_p2;
                icmp_ln96_reg_1268_pp0_iter1_reg <= icmp_ln96_reg_1268;
                icmp_ln97_reg_1278_pp0_iter1_reg <= icmp_ln97_reg_1278;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_1268_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln97_1_reg_1341 <= add_ln97_1_fu_407_p2;
                add_ln97_reg_1336 <= add_ln97_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_1268_pp0_iter1_reg = ap_const_lv1_0))) then
                and_ln97_reg_1305 <= and_ln97_fu_330_p2;
                select_ln97_7_reg_1314 <= select_ln97_7_fu_340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter2_reg = ap_const_lv1_0))) then
                empty_89_reg_1348 <= grp_fu_1205_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_reg_1268 = ap_const_lv1_0))) then
                icmp_ln98_reg_1300 <= icmp_ln98_fu_316_p2;
                k_load_reg_1295 <= ap_sig_allocacmp_k_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                in_data_load_1_reg_1385 <= in_data_q2;
                in_data_load_2_reg_1392 <= in_data_q1;
                in_data_load_3_reg_1399 <= in_data_q0;
                in_data_load_reg_1378 <= in_data_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln106_1_fu_809_p2 <= std_logic_vector(unsigned(zext_ln106_fu_784_p1) + unsigned(select_ln97_11_cast_fu_780_p1));
    add_ln106_fu_787_p2 <= std_logic_vector(unsigned(zext_ln106_fu_784_p1) + unsigned(select_ln97_10_cast_fu_734_p1));
    add_ln113_fu_834_p2 <= std_logic_vector(unsigned(zext_ln113_fu_831_p1) + unsigned(select_ln97_9_fu_692_p3));
    add_ln96_1_fu_251_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten75_load) + unsigned(ap_const_lv11_1));
    add_ln96_fu_260_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ch_1) + unsigned(ap_const_lv3_1));
    add_ln97_1_fu_407_p2 <= std_logic_vector(unsigned(select_ln97_1_fu_394_p3) + unsigned(ap_const_lv5_2));
    add_ln97_2_fu_284_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln97_fu_401_p2 <= std_logic_vector(unsigned(select_ln97_fu_387_p3) + unsigned(ap_const_lv4_1));
    add_ln98_1_fu_365_p2 <= std_logic_vector(unsigned(select_ln97_8_fu_347_p3) + unsigned(ap_const_lv5_2));
    add_ln98_fu_359_p2 <= std_logic_vector(unsigned(select_ln97_7_fu_340_p3) + unsigned(ap_const_lv4_1));
    and_ln107_1_fu_958_p2 <= (or_ln107_2_fu_952_p2 and or_ln107_1_fu_934_p2);
    and_ln107_2_fu_964_p2 <= (grp_fu_252_p_dout0 and and_ln107_1_fu_958_p2);
    and_ln107_3_fu_1046_p2 <= (or_ln107_4_fu_1040_p2 and or_ln107_3_fu_1022_p2);
    and_ln107_4_fu_1052_p2 <= (grp_fu_256_p_dout0 and and_ln107_3_fu_1046_p2);
    and_ln107_5_fu_1134_p2 <= (or_ln107_6_fu_1128_p2 and or_ln107_5_fu_1110_p2);
    and_ln107_6_fu_1140_p2 <= (grp_fu_260_p_dout0 and and_ln107_5_fu_1134_p2);
    and_ln107_fu_875_p2 <= (or_ln107_fu_869_p2 and grp_fu_248_p_dout0);
    and_ln113_fu_1187_p2 <= (or_ln113_fu_1181_p2 and grp_fu_264_p_dout0);
    and_ln97_fu_330_p2 <= (xor_ln97_fu_325_p2 and icmp_ln98_reg_1300);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln96_fu_245_p2)
    begin
        if (((icmp_ln96_fu_245_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, icmp_ln96_reg_1268_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ch_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ch_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ch_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_ch_1 <= ch_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten75_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten75_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten75_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten75_load <= indvar_flatten75_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln96_reg_1268_pp0_iter1_reg, ap_block_pp0_stage0, k_fu_96, add_ln98_fu_359_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1268_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_k_load <= add_ln98_fu_359_p2;
        else 
            ap_sig_allocacmp_k_load <= k_fu_96;
        end if; 
    end process;

    bitcast_ln107_1_fu_888_p1 <= select_ln107_reg_1406_pp0_iter8_reg;
    bitcast_ln107_2_fu_905_p1 <= in_data_load_1_reg_1385_pp0_iter8_reg;
    bitcast_ln107_3_fu_976_p1 <= select_ln107_1_reg_1413_pp0_iter10_reg;
    bitcast_ln107_4_fu_993_p1 <= in_data_load_2_reg_1392_pp0_iter10_reg;
    bitcast_ln107_5_fu_1064_p1 <= select_ln107_2_reg_1420_pp0_iter12_reg;
    bitcast_ln107_6_fu_1081_p1 <= in_data_load_3_reg_1399_pp0_iter12_reg;
    bitcast_ln107_fu_840_p1 <= in_data_load_reg_1378_pp0_iter6_reg;
    bitcast_ln113_fu_1152_p1 <= select_ln107_3_reg_1427_pp0_iter14_reg;
    empty_81_fu_468_p2 <= std_logic_vector(unsigned(zext_ln97_fu_465_p1) + unsigned(empty_fu_459_p2));
    empty_82_fu_474_p1 <= empty_81_fu_468_p2(7 - 1 downto 0);
    empty_83_fu_526_p2 <= std_logic_vector(unsigned(p_shl7_0_cast_fu_511_p1) - unsigned(p_shl8_0_cast_fu_522_p1));
    empty_84_fu_532_p2 <= (r_1_reg_1324 or ap_const_lv5_1);
    empty_85_fu_561_p2 <= std_logic_vector(unsigned(p_shl7_1_cast_fu_545_p1) - unsigned(p_shl8_1_cast_fu_557_p1));
    empty_87_fu_602_p1 <= p_mid121_fu_589_p2(7 - 1 downto 0);
    empty_88_fu_662_p1 <= p_mid1_fu_656_p2(7 - 1 downto 0);
    empty_fu_459_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_444_p1) - unsigned(p_shl4_cast_fu_455_p1));
    grp_fu_1205_p0 <= grp_fu_1205_p00(3 - 1 downto 0);
    grp_fu_1205_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_3_fu_272_p3),12));
    grp_fu_1205_p1 <= ap_const_lv12_310(10 - 1 downto 0);
    grp_fu_1205_p2 <= grp_fu_1205_p20(5 - 1 downto 0);
    grp_fu_1205_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_8_fu_347_p3),12));
    grp_fu_248_p_ce <= ap_const_logic_1;
    grp_fu_248_p_din0 <= in_data_load_reg_1378;
    grp_fu_248_p_din1 <= ap_const_lv32_C37F0000;
    grp_fu_248_p_opcode <= ap_const_lv5_2;
    grp_fu_252_p_ce <= ap_const_logic_1;
    grp_fu_252_p_din0 <= select_ln107_reg_1406;
    grp_fu_252_p_din1 <= in_data_load_1_reg_1385_pp0_iter7_reg;
    grp_fu_252_p_opcode <= ap_const_lv5_4;
    grp_fu_256_p_ce <= ap_const_logic_1;
    grp_fu_256_p_din0 <= select_ln107_1_reg_1413;
    grp_fu_256_p_din1 <= in_data_load_2_reg_1392_pp0_iter9_reg;
    grp_fu_256_p_opcode <= ap_const_lv5_4;
    grp_fu_260_p_ce <= ap_const_logic_1;
    grp_fu_260_p_din0 <= select_ln107_2_reg_1420;
    grp_fu_260_p_din1 <= in_data_load_3_reg_1399_pp0_iter11_reg;
    grp_fu_260_p_opcode <= ap_const_lv5_4;
    grp_fu_264_p_ce <= ap_const_logic_1;
    grp_fu_264_p_din0 <= select_ln107_3_reg_1427;
    grp_fu_264_p_din1 <= ap_const_lv32_0;
    grp_fu_264_p_opcode <= ap_const_lv5_5;
    icmp_ln107_10_fu_1098_p2 <= "0" when (tmp_1_fu_1067_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_11_fu_1104_p2 <= "1" when (trunc_ln107_5_fu_1077_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_12_fu_1116_p2 <= "0" when (tmp_2_fu_1084_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_13_fu_1122_p2 <= "1" when (trunc_ln107_6_fu_1094_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_1_fu_863_p2 <= "1" when (trunc_ln107_fu_853_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_2_fu_922_p2 <= "0" when (tmp_5_fu_891_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_3_fu_928_p2 <= "1" when (trunc_ln107_1_fu_901_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_4_fu_940_p2 <= "0" when (tmp_6_fu_908_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_5_fu_946_p2 <= "1" when (trunc_ln107_2_fu_918_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_6_fu_1010_p2 <= "0" when (tmp_8_fu_979_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_7_fu_1016_p2 <= "1" when (trunc_ln107_3_fu_989_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_8_fu_1028_p2 <= "0" when (tmp_9_fu_996_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_9_fu_1034_p2 <= "1" when (trunc_ln107_4_fu_1006_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_fu_857_p2 <= "0" when (tmp_fu_843_p4 = ap_const_lv8_FF) else "1";
    icmp_ln113_1_fu_1175_p2 <= "1" when (trunc_ln113_fu_1165_p1 = ap_const_lv23_0) else "0";
    icmp_ln113_fu_1169_p2 <= "0" when (tmp_10_fu_1155_p4 = ap_const_lv8_FF) else "1";
    icmp_ln96_fu_245_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten75_load = ap_const_lv11_498) else "0";
    icmp_ln97_fu_266_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_C4) else "0";
    icmp_ln98_fu_316_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv4_E) else "0";
    in_data_address0 <= zext_ln106_4_fu_826_p1(13 - 1 downto 0);
    in_data_address1 <= zext_ln106_3_fu_815_p1(13 - 1 downto 0);
    in_data_address2 <= zext_ln106_2_fu_804_p1(13 - 1 downto 0);
    in_data_address3 <= zext_ln106_1_fu_793_p1(13 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce1 <= ap_const_logic_1;
        else 
            in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce2 <= ap_const_logic_1;
        else 
            in_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce3 <= ap_const_logic_1;
        else 
            in_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln106_1_fu_820_p2 <= (ap_const_lv13_1 or add_ln106_1_fu_809_p2);
    or_ln106_fu_798_p2 <= (ap_const_lv13_1 or add_ln106_fu_787_p2);
    or_ln107_1_fu_934_p2 <= (icmp_ln107_3_fu_928_p2 or icmp_ln107_2_fu_922_p2);
    or_ln107_2_fu_952_p2 <= (icmp_ln107_5_fu_946_p2 or icmp_ln107_4_fu_940_p2);
    or_ln107_3_fu_1022_p2 <= (icmp_ln107_7_fu_1016_p2 or icmp_ln107_6_fu_1010_p2);
    or_ln107_4_fu_1040_p2 <= (icmp_ln107_9_fu_1034_p2 or icmp_ln107_8_fu_1028_p2);
    or_ln107_5_fu_1110_p2 <= (icmp_ln107_11_fu_1104_p2 or icmp_ln107_10_fu_1098_p2);
    or_ln107_6_fu_1128_p2 <= (icmp_ln107_13_fu_1122_p2 or icmp_ln107_12_fu_1116_p2);
    or_ln107_fu_869_p2 <= (icmp_ln107_fu_857_p2 or icmp_ln107_1_fu_863_p2);
    or_ln113_fu_1181_p2 <= (icmp_ln113_fu_1169_p2 or icmp_ln113_1_fu_1175_p2);
    or_ln97_fu_335_p2 <= (icmp_ln97_reg_1278_pp0_iter1_reg or and_ln97_fu_330_p2);
    p1_out_data_address0 <= zext_ln113_1_fu_1201_p1(11 - 1 downto 0);

    p1_out_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            p1_out_data_ce0 <= ap_const_logic_1;
        else 
            p1_out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p1_out_data_d0 <= select_ln113_reg_1433;

    p1_out_data_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            p1_out_data_we0 <= ap_const_logic_1;
        else 
            p1_out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid121_fu_589_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_574_p1) - unsigned(p_shl4_cast_mid1_fu_585_p1));
    p_mid15_fu_721_p2 <= std_logic_vector(unsigned(p_shl7_0_cast_mid1_fu_706_p1) - unsigned(p_shl8_0_cast_mid1_fu_717_p1));
    p_mid17_fu_738_p2 <= (ap_const_lv5_1 or add_ln97_1_reg_1341);
    p_mid19_fu_767_p2 <= std_logic_vector(unsigned(p_shl7_1_cast_mid1_fu_751_p1) - unsigned(p_shl8_1_cast_mid1_fu_763_p1));
    p_mid1_fu_656_p2 <= std_logic_vector(unsigned(zext_ln97_2_fu_653_p1) + unsigned(select_ln97_2_fu_595_p3));
    p_shl4_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_448_p3),8));
    p_shl4_cast_mid1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_mid1_fu_578_p3),8));
    p_shl4_fu_448_p3 <= (ch_1_reg_1262_pp0_iter3_reg & ap_const_lv1_0);
    p_shl4_mid1_fu_578_p3 <= (add_ln96_reg_1272_pp0_iter3_reg & ap_const_lv1_0);
    p_shl5_fu_478_p3 <= (empty_82_fu_474_p1 & ap_const_lv4_0);
    p_shl5_mid1_fu_666_p3 <= (empty_88_fu_662_p1 & ap_const_lv4_0);
    p_shl5_mid_fu_606_p3 <= (empty_87_fu_602_p1 & ap_const_lv4_0);
        p_shl6_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_fu_486_p3),11));

        p_shl6_cast_mid139_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_mid_fu_614_p3),11));

        p_shl6_cast_mid1_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_mid1_fu_674_p3),11));

    p_shl6_fu_486_p3 <= (empty_81_fu_468_p2 & ap_const_lv1_0);
    p_shl6_mid1_fu_674_p3 <= (p_mid1_fu_656_p2 & ap_const_lv1_0);
    p_shl6_mid_fu_614_p3 <= (p_mid121_fu_589_p2 & ap_const_lv1_0);
    p_shl7_0_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_504_p3),11));
    p_shl7_0_cast_mid1_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_0_mid1_fu_699_p3),11));
    p_shl7_0_mid1_fu_699_p3 <= (add_ln97_1_reg_1341 & ap_const_lv5_0);
    p_shl7_1_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_1_fu_537_p3),11));
    p_shl7_1_cast_mid1_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_1_mid1_fu_743_p3),11));
    p_shl7_1_fu_537_p3 <= (empty_84_fu_532_p2 & ap_const_lv5_0);
    p_shl7_1_mid1_fu_743_p3 <= (p_mid17_fu_738_p2 & ap_const_lv5_0);
    p_shl7_fu_504_p3 <= (r_1_reg_1324 & ap_const_lv5_0);
    p_shl8_0_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_515_p3),11));
    p_shl8_0_cast_mid1_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_0_mid1_fu_710_p3),11));
    p_shl8_0_mid1_fu_710_p3 <= (add_ln97_1_reg_1341 & ap_const_lv2_0);
    p_shl8_1_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_1_fu_549_p3),11));
    p_shl8_1_cast_mid1_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_1_mid1_fu_755_p3),11));
    p_shl8_1_fu_549_p3 <= (empty_84_fu_532_p2 & ap_const_lv2_0);
    p_shl8_1_mid1_fu_755_p3 <= (p_mid17_fu_738_p2 & ap_const_lv2_0);
    p_shl8_fu_515_p3 <= (r_1_reg_1324 & ap_const_lv2_0);
    p_shl_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_437_p3),8));
    p_shl_cast_mid1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_567_p3),8));
    p_shl_fu_437_p3 <= (ch_1_reg_1262_pp0_iter3_reg & ap_const_lv4_0);
    p_shl_mid1_fu_567_p3 <= (add_ln96_reg_1272_pp0_iter3_reg & ap_const_lv4_0);
    select_ln107_1_fu_970_p3 <= 
        in_data_load_1_reg_1385_pp0_iter8_reg when (and_ln107_2_fu_964_p2(0) = '1') else 
        select_ln107_reg_1406_pp0_iter8_reg;
    select_ln107_2_fu_1058_p3 <= 
        in_data_load_2_reg_1392_pp0_iter10_reg when (and_ln107_4_fu_1052_p2(0) = '1') else 
        select_ln107_1_reg_1413_pp0_iter10_reg;
    select_ln107_3_fu_1146_p3 <= 
        in_data_load_3_reg_1399_pp0_iter12_reg when (and_ln107_6_fu_1140_p2(0) = '1') else 
        select_ln107_2_reg_1420_pp0_iter12_reg;
    select_ln107_fu_881_p3 <= 
        in_data_load_reg_1378_pp0_iter6_reg when (and_ln107_fu_875_p2(0) = '1') else 
        ap_const_lv32_C37F0000;
    select_ln113_fu_1193_p3 <= 
        ap_const_lv32_0 when (and_ln113_fu_1187_p2(0) = '1') else 
        bitcast_ln113_fu_1152_p1;
        select_ln97_10_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln97_10_fu_727_p3),13));

    select_ln97_10_fu_727_p3 <= 
        p_mid15_fu_721_p2 when (and_ln97_reg_1305_pp0_iter3_reg(0) = '1') else 
        select_ln97_5_fu_639_p3;
        select_ln97_11_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln97_11_fu_773_p3),13));

    select_ln97_11_fu_773_p3 <= 
        p_mid19_fu_767_p2 when (and_ln97_reg_1305_pp0_iter3_reg(0) = '1') else 
        select_ln97_6_fu_646_p3;
    select_ln97_12_fu_413_p3 <= 
        add_ln97_fu_401_p2 when (and_ln97_reg_1305(0) = '1') else 
        select_ln97_fu_387_p3;
    select_ln97_13_fu_420_p3 <= 
        add_ln97_1_fu_407_p2 when (and_ln97_reg_1305(0) = '1') else 
        select_ln97_1_fu_394_p3;
    select_ln97_14_fu_290_p3 <= 
        ap_const_lv8_1 when (icmp_ln97_fu_266_p2(0) = '1') else 
        add_ln97_2_fu_284_p2;
    select_ln97_1_fu_394_p3 <= 
        ap_const_lv5_0 when (icmp_ln97_reg_1278_pp0_iter2_reg(0) = '1') else 
        r_fu_100;
    select_ln97_2_fu_595_p3 <= 
        p_mid121_fu_589_p2 when (icmp_ln97_reg_1278_pp0_iter3_reg(0) = '1') else 
        empty_fu_459_p2;
    select_ln97_3_fu_272_p3 <= 
        add_ln96_fu_260_p2 when (icmp_ln97_fu_266_p2(0) = '1') else 
        ap_sig_allocacmp_ch_1;
    select_ln97_4_fu_632_p3 <= 
        sub_ln100_1_fu_626_p2 when (icmp_ln97_reg_1278_pp0_iter3_reg(0) = '1') else 
        sub_ln100_fu_498_p2;
    select_ln97_5_fu_639_p3 <= 
        ap_const_lv11_0 when (icmp_ln97_reg_1278_pp0_iter3_reg(0) = '1') else 
        empty_83_fu_526_p2;
    select_ln97_6_fu_646_p3 <= 
        ap_const_lv11_1C when (icmp_ln97_reg_1278_pp0_iter3_reg(0) = '1') else 
        empty_85_fu_561_p2;
    select_ln97_7_fu_340_p3 <= 
        ap_const_lv4_0 when (or_ln97_fu_335_p2(0) = '1') else 
        k_load_reg_1295;
    select_ln97_8_fu_347_p3 <= 
        ap_const_lv5_0 when (or_ln97_fu_335_p2(0) = '1') else 
        c_fu_92;
    select_ln97_9_fu_692_p3 <= 
        sub_ln100_2_fu_686_p2 when (and_ln97_reg_1305_pp0_iter3_reg(0) = '1') else 
        select_ln97_4_fu_632_p3;
    select_ln97_fu_387_p3 <= 
        ap_const_lv4_0 when (icmp_ln97_reg_1278_pp0_iter2_reg(0) = '1') else 
        g_fu_104;
    sub_ln100_1_fu_626_p2 <= std_logic_vector(unsigned(p_shl5_mid_fu_606_p3) - unsigned(p_shl6_cast_mid139_fu_622_p1));
    sub_ln100_2_fu_686_p2 <= std_logic_vector(unsigned(p_shl5_mid1_fu_666_p3) - unsigned(p_shl6_cast_mid1_fu_682_p1));
    sub_ln100_fu_498_p2 <= std_logic_vector(unsigned(p_shl5_fu_478_p3) - unsigned(p_shl6_cast_fu_494_p1));
    tmp_10_fu_1155_p4 <= bitcast_ln113_fu_1152_p1(30 downto 23);
    tmp_1_fu_1067_p4 <= bitcast_ln107_5_fu_1064_p1(30 downto 23);
    tmp_2_fu_1084_p4 <= bitcast_ln107_6_fu_1081_p1(30 downto 23);
    tmp_5_fu_891_p4 <= bitcast_ln107_1_fu_888_p1(30 downto 23);
    tmp_6_fu_908_p4 <= bitcast_ln107_2_fu_905_p1(30 downto 23);
    tmp_8_fu_979_p4 <= bitcast_ln107_3_fu_976_p1(30 downto 23);
    tmp_9_fu_996_p4 <= bitcast_ln107_4_fu_993_p1(30 downto 23);
    tmp_fu_843_p4 <= bitcast_ln107_fu_840_p1(30 downto 23);
    trunc_ln107_1_fu_901_p1 <= bitcast_ln107_1_fu_888_p1(23 - 1 downto 0);
    trunc_ln107_2_fu_918_p1 <= bitcast_ln107_2_fu_905_p1(23 - 1 downto 0);
    trunc_ln107_3_fu_989_p1 <= bitcast_ln107_3_fu_976_p1(23 - 1 downto 0);
    trunc_ln107_4_fu_1006_p1 <= bitcast_ln107_4_fu_993_p1(23 - 1 downto 0);
    trunc_ln107_5_fu_1077_p1 <= bitcast_ln107_5_fu_1064_p1(23 - 1 downto 0);
    trunc_ln107_6_fu_1094_p1 <= bitcast_ln107_6_fu_1081_p1(23 - 1 downto 0);
    trunc_ln107_fu_853_p1 <= bitcast_ln107_fu_840_p1(23 - 1 downto 0);
    trunc_ln113_fu_1165_p1 <= bitcast_ln113_fu_1152_p1(23 - 1 downto 0);
    xor_ln97_fu_325_p2 <= (icmp_ln97_reg_1278_pp0_iter1_reg xor ap_const_lv1_1);
    zext_ln106_1_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_fu_787_p2),32));
    zext_ln106_2_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln106_fu_798_p2),32));
    zext_ln106_3_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_1_fu_809_p2),32));
    zext_ln106_4_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln106_1_fu_820_p2),32));
    zext_ln106_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_89_reg_1348),13));
    zext_ln113_1_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_reg_1373_pp0_iter15_reg),32));
    zext_ln113_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_7_reg_1314_pp0_iter3_reg),11));
    zext_ln97_2_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_reg_1336),8));
    zext_ln97_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_1_reg_1331),8));
end behav;
