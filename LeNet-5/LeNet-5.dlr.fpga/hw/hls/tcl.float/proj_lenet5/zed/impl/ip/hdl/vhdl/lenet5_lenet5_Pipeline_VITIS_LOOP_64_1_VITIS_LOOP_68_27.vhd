-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln64 : IN STD_LOGIC_VECTOR (29 downto 0);
    f2_out_data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    f2_out_data_ce0 : OUT STD_LOGIC;
    f2_out_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_236_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_236_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_236_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_236_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_236_p_ce : OUT STD_LOGIC;
    grp_fu_244_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_244_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_244_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_244_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_348 : STD_LOGIC_VECTOR (9 downto 0) := "1101001000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln64_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fc3_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc3_bias_ce0 : STD_LOGIC;
    signal fc3_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc3_weight_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc3_weight_ce0 : STD_LOGIC;
    signal fc3_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln64_reg_341_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero19_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero19_reg_370_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter3 : BOOLEAN;
    signal ap_predicate_op96_write_state20 : BOOLEAN;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln64_reg_341_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ifzero19_reg_370_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_341_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_345_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_fu_211_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln68_reg_350 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln68_2_fu_219_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln68_2_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln68_2_reg_355_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ifzero19_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero19_reg_370_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pX_load_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal pW_load_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal select_ln68_1_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_1_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul20_i2_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc3_bias_load_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln69_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln70_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln68_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal sum_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sum_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_76 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_fu_236_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal o_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_o_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten26_fu_84 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln64_fu_187_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten26_load : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_141_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal add_ln64_1_fu_199_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_299_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_299_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_141_ce : STD_LOGIC;
    signal ap_predicate_op85_fadd_state15 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal grp_fu_145_ce : STD_LOGIC;
    signal grp_fu_299_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal grp_fu_299_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_299_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lenet5_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_mac_muladd_4ns_7ns_7ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27_fc3_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27_fc3_weight_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fc3_bias_U : component lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27_fc3_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc3_bias_address0,
        ce0 => fc3_bias_ce0,
        q0 => fc3_bias_q0);

    fc3_weight_U : component lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_27_fc3_weight_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc3_weight_address0,
        ce0 => fc3_weight_ce0,
        q0 => fc3_weight_q0);

    mac_muladd_4ns_7ns_7ns_10_4_1_U126 : component lenet5_mac_muladd_4ns_7ns_7ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_299_p0,
        din1 => grp_fu_299_p1,
        din2 => grp_fu_299_p2,
        ce => grp_fu_299_ce,
        dout => grp_fu_299_p3);

    flow_control_loop_pipe_sequential_init_U : component lenet5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_181_p2 = ap_const_lv1_0))) then 
                    i_fu_76 <= add_ln68_fu_236_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_181_p2 = ap_const_lv1_0))) then 
                    indvar_flatten26_fu_84 <= add_ln64_fu_187_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_84 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    o_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_181_p2 = ap_const_lv1_0))) then 
                    o_fu_80 <= select_ln68_2_fu_219_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    o_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    sum_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_fu_72 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_0))) then 
                sum_fu_72 <= reg_149;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_0))) then
                fc3_bias_load_reg_409 <= fc3_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln64_reg_341 <= icmp_ln64_fu_181_p2;
                icmp_ln64_reg_341_pp0_iter1_reg <= icmp_ln64_reg_341;
                icmp_ln64_reg_341_pp0_iter2_reg <= icmp_ln64_reg_341_pp0_iter1_reg;
                icmp_ln64_reg_341_pp0_iter3_reg <= icmp_ln64_reg_341_pp0_iter2_reg;
                icmp_ln68_reg_345_pp0_iter1_reg <= icmp_ln68_reg_345;
                ifzero19_reg_370_pp0_iter1_reg <= ifzero19_reg_370;
                ifzero19_reg_370_pp0_iter2_reg <= ifzero19_reg_370_pp0_iter1_reg;
                ifzero19_reg_370_pp0_iter3_reg <= ifzero19_reg_370_pp0_iter2_reg;
                select_ln68_2_reg_355_pp0_iter1_reg <= select_ln68_2_reg_355;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln68_reg_345 <= icmp_ln68_fu_205_p2;
                ifzero19_reg_370 <= ifzero19_fu_242_p2;
                select_ln68_2_reg_355 <= select_ln68_2_fu_219_p3;
                select_ln68_reg_350 <= select_ln68_fu_211_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln64_reg_341_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul20_i2_reg_399 <= grp_fu_244_p_dout0;
                select_ln68_1_reg_394 <= select_ln68_1_fu_273_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                pW_load_reg_389 <= fc3_weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                pX_load_reg_374 <= f2_out_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ifzero19_reg_370_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_0)))) then
                reg_149 <= grp_fu_236_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter3_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_0to2, ap_idle_pp0_1to3, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln64_1_fu_199_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_o_load) + unsigned(ap_const_lv4_1));
    add_ln64_fu_187_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten26_load) + unsigned(ap_const_lv10_1));
    add_ln68_fu_236_p2 <= std_logic_vector(unsigned(select_ln68_fu_211_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state20_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state20_io));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state20_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state20_io));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(m_axi_data_WREADY, ap_predicate_op96_write_state20)
    begin
                ap_block_state20_io <= ((m_axi_data_WREADY = ap_const_logic_0) and (ap_predicate_op96_write_state20 = ap_const_boolean_1));
    end process;

        ap_block_state20_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln64_reg_341)
    begin
        if (((icmp_ln64_reg_341 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln64_reg_341_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_predicate_op85_fadd_state15_assign_proc : process(icmp_ln64_reg_341_pp0_iter2_reg, ifzero19_reg_370_pp0_iter2_reg)
    begin
                ap_predicate_op85_fadd_state15 <= ((ifzero19_reg_370_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op96_write_state20_assign_proc : process(icmp_ln64_reg_341_pp0_iter3_reg, ifzero19_reg_370_pp0_iter3_reg)
    begin
                ap_predicate_op96_write_state20 <= ((ifzero19_reg_370_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln64_reg_341_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten26_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten26_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten26_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten26_load <= indvar_flatten26_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_o_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, o_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_o_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_o_load <= o_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_sum_load_assign_proc : process(ap_enable_reg_pp0_iter2, reg_149, icmp_ln64_reg_341_pp0_iter2_reg, ap_CS_fsm_pp0_stage2, sum_fu_72, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln64_reg_341_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_sum_load <= reg_149;
        else 
            ap_sig_allocacmp_sum_load <= sum_fu_72;
        end if; 
    end process;


    data_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_data_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln64_reg_341_pp0_iter3_reg, ifzero19_reg_370_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ifzero19_reg_370_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln64_reg_341_pp0_iter3_reg = ap_const_lv1_0))) then 
            data_blk_n_W <= m_axi_data_WREADY;
        else 
            data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    f2_out_data_address0 <= zext_ln69_fu_231_p1(7 - 1 downto 0);

    f2_out_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f2_out_data_ce0 <= ap_const_logic_1;
        else 
            f2_out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc3_bias_address0 <= zext_ln68_fu_280_p1(4 - 1 downto 0);

    fc3_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc3_bias_ce0 <= ap_const_logic_1;
        else 
            fc3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc3_weight_address0 <= zext_ln70_fu_266_p1(10 - 1 downto 0);

    fc3_weight_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            fc3_weight_ce0 <= ap_const_logic_1;
        else 
            fc3_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, reg_149, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, select_ln68_1_reg_394, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_141_p0 <= reg_149;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_141_p0 <= select_ln68_1_reg_394;
        else 
            grp_fu_141_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_141_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, mul20_i2_reg_399, fc3_bias_load_reg_409, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_141_p1 <= fc3_bias_load_reg_409;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_141_p1 <= mul20_i2_reg_399;
        else 
            grp_fu_141_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_145_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_145_ce <= ap_const_logic_1;
        else 
            grp_fu_145_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_236_p_ce <= grp_fu_141_ce;
    grp_fu_236_p_din0 <= grp_fu_141_p0;
    grp_fu_236_p_din1 <= grp_fu_141_p1;
    grp_fu_236_p_opcode <= ap_const_lv2_0;
    grp_fu_244_p_ce <= grp_fu_145_ce;
    grp_fu_244_p_din0 <= pX_load_reg_374;
    grp_fu_244_p_din1 <= pW_load_reg_389;

    grp_fu_299_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_299_ce <= ap_const_logic_1;
        else 
            grp_fu_299_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_299_p0 <= grp_fu_299_p00(4 - 1 downto 0);
    grp_fu_299_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_219_p3),10));
    grp_fu_299_p1 <= ap_const_lv10_54(7 - 1 downto 0);
    grp_fu_299_p2 <= grp_fu_299_p20(7 - 1 downto 0);
    grp_fu_299_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_reg_350),10));
    icmp_ln64_fu_181_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten26_load = ap_const_lv10_348) else "0";
    icmp_ln68_fu_205_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv7_54) else "0";
    ifzero19_fu_242_p2 <= "1" when (add_ln68_fu_236_p2 = ap_const_lv7_54) else "0";
    m_axi_data_ARADDR <= ap_const_lv32_0;
    m_axi_data_ARBURST <= ap_const_lv2_0;
    m_axi_data_ARCACHE <= ap_const_lv4_0;
    m_axi_data_ARID <= ap_const_lv1_0;
    m_axi_data_ARLEN <= ap_const_lv32_0;
    m_axi_data_ARLOCK <= ap_const_lv2_0;
    m_axi_data_ARPROT <= ap_const_lv3_0;
    m_axi_data_ARQOS <= ap_const_lv4_0;
    m_axi_data_ARREGION <= ap_const_lv4_0;
    m_axi_data_ARSIZE <= ap_const_lv3_0;
    m_axi_data_ARUSER <= ap_const_lv1_0;
    m_axi_data_ARVALID <= ap_const_logic_0;
    m_axi_data_AWADDR <= ap_const_lv32_0;
    m_axi_data_AWBURST <= ap_const_lv2_0;
    m_axi_data_AWCACHE <= ap_const_lv4_0;
    m_axi_data_AWID <= ap_const_lv1_0;
    m_axi_data_AWLEN <= ap_const_lv32_0;
    m_axi_data_AWLOCK <= ap_const_lv2_0;
    m_axi_data_AWPROT <= ap_const_lv3_0;
    m_axi_data_AWQOS <= ap_const_lv4_0;
    m_axi_data_AWREGION <= ap_const_lv4_0;
    m_axi_data_AWSIZE <= ap_const_lv3_0;
    m_axi_data_AWUSER <= ap_const_lv1_0;
    m_axi_data_AWVALID <= ap_const_logic_0;
    m_axi_data_BREADY <= ap_const_logic_0;
    m_axi_data_RREADY <= ap_const_logic_0;
    m_axi_data_WDATA <= reg_149;
    m_axi_data_WID <= ap_const_lv1_0;
    m_axi_data_WLAST <= ap_const_logic_0;
    m_axi_data_WSTRB <= ap_const_lv4_F;
    m_axi_data_WUSER <= ap_const_lv1_0;

    m_axi_data_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_predicate_op96_write_state20, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_predicate_op96_write_state20 = ap_const_boolean_1))) then 
            m_axi_data_WVALID <= ap_const_logic_1;
        else 
            m_axi_data_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln68_1_fu_273_p3 <= 
        ap_const_lv32_0 when (icmp_ln68_reg_345_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_sum_load;
    select_ln68_2_fu_219_p3 <= 
        add_ln64_1_fu_199_p2 when (icmp_ln68_fu_205_p2(0) = '1') else 
        ap_sig_allocacmp_o_load;
    select_ln68_fu_211_p3 <= 
        ap_const_lv7_0 when (icmp_ln68_fu_205_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    zext_ln68_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_reg_355_pp0_iter1_reg),32));
    zext_ln69_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_211_p3),32));
    zext_ln70_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_299_p3),32));
end behav;
