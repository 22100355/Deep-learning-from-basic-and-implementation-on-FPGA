-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet5_Pooling2dMax_float_1_0_1036831949u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_data_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_we0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_data_ce1 : OUT STD_LOGIC;
    in_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address2 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_data_ce2 : OUT STD_LOGIC;
    in_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address3 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_data_ce3 : OUT STD_LOGIC;
    in_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_248_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_248_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_248_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_248_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_248_p_ce : OUT STD_LOGIC;
    grp_fu_252_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_252_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_252_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_252_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_252_p_ce : OUT STD_LOGIC;
    grp_fu_256_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_256_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_256_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_256_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_256_p_ce : OUT STD_LOGIC;
    grp_fu_260_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_260_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_260_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_260_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_260_p_ce : OUT STD_LOGIC;
    grp_fu_264_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_264_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_264_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_264_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_264_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet5_Pooling2dMax_float_1_0_1036831949u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_C37F0000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011011111110000000000000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv11_64 : STD_LOGIC_VECTOR (10 downto 0) := "00001100100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln96_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_245_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1196 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln96_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1203_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1203_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1207_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1207_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_93_fu_276_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_93_reg_1222 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_load_reg_1234 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln97_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln97_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln97_reg_1239_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_2_fu_458_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_2_reg_1249 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_2_reg_1255 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln97_2_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln97_2_reg_1262 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln100_1_fu_548_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_1_reg_1274_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln106_fu_728_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln106_reg_1279 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln106_2_fu_739_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln106_2_reg_1285 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_data_load_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_reg_1311_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_4_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_4_reg_1318_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_4_reg_1318_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_4_reg_1318_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_5_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_5_reg_1325_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_5_reg_1325_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_5_reg_1325_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_5_reg_1325_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_5_reg_1325_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_load_6_reg_1332_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_fu_814_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_reg_1339_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_4_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_4_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_4_reg_1346_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_5_fu_991_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_5_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_5_reg_1353_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_6_fu_1079_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_6_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_6_reg_1360_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln113_fu_1126_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln113_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal zext_ln106_fu_745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln106_5_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln106_6_fu_759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln106_7_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln100_2_fu_1133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln98_2_fu_560_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln98_fu_554_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (2 downto 0);
    signal r_fu_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln97_25_fu_524_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal g_fu_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln97_24_fu_466_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_26_fu_298_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_fu_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln97_18_fu_280_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_ch_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten72_fu_116 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln96_2_fu_255_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten72_load : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln96_fu_264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln97_3_fu_292_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_327_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_cast_cast5_fu_324_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal g_cast_fu_338_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_fu_334_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_16_fu_368_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid_fu_377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_17_fu_388_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_mid136_fu_399_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_mid1_fu_384_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid138_fu_402_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_90_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln98_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln97_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln97_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln97_fu_432_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln97_16_cast_fu_373_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal g_cast_mid1_fu_438_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_442_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_mid1_fu_448_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln97_3_fu_395_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid1_fu_452_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_19_fu_408_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_15_fu_485_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln85_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_1_fu_509_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln85_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln100_fu_535_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln100_fu_539_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln100_1_fu_544_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid2_fu_517_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_91_fu_595_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_581_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_588_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_608_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid3_fu_644_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln97_20_fu_616_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln85_3_fu_651_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid4_fu_662_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_21_fu_623_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_4_fu_669_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid114_fu_680_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid5_fu_685_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln97_22_fu_630_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln85_5_fu_693_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid6_fu_704_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_23_fu_637_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_6_fu_712_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_3_cast_fu_658_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1137_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln106_3_fu_723_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln106_3_fu_723_p2 : signal is "no";
    signal select_ln85_4_cast_fu_676_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln85_5_cast_fu_700_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln106_4_fu_734_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of add_ln106_4_fu_734_p2 : signal is "no";
    signal select_ln85_6_cast_fu_719_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln106_fu_749_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln106_2_fu_763_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln107_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_776_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_fu_786_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_14_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_7_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln107_8_fu_838_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_824_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_7_fu_834_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_16_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_15_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_841_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_8_fu_851_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_18_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_17_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_7_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_8_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_7_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_8_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_9_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln107_10_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_912_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_9_fu_922_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_20_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_19_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_929_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_10_fu_939_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_22_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_21_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_9_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_10_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_9_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_10_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_11_fu_997_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln107_12_fu_1014_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1000_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_11_fu_1010_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_24_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_23_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1017_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_12_fu_1027_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln107_26_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_25_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_11_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_12_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_11_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_12_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln113_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1088_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_fu_1098_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln113_2_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln113_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln113_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1137_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1137_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1137_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1137_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1137_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lenet5_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet5_mac_muladd_5ns_7ns_4ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component lenet5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_7ns_4ns_11_4_1_U104 : component lenet5_mac_muladd_5ns_7ns_4ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1137_p0,
        din1 => grp_fu_1137_p1,
        din2 => grp_fu_1137_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1137_p3);

    flow_control_loop_pipe_sequential_init_U : component lenet5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_fu_92 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1203_pp0_iter1_reg = ap_const_lv1_0))) then 
                    c_fu_92 <= add_ln98_2_fu_560_p2;
                end if;
            end if; 
        end if;
    end process;

    ch_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ch_fu_112 <= select_ln97_18_fu_280_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ch_fu_112 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    g_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    g_fu_104 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln96_reg_1203 = ap_const_lv1_0))) then 
                    g_fu_104 <= select_ln97_24_fu_466_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten72_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten72_fu_116 <= add_ln96_2_fu_255_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten72_fu_116 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= select_ln97_26_fu_298_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    k_fu_96 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1203_pp0_iter1_reg = ap_const_lv1_0))) then 
                    k_fu_96 <= add_ln98_fu_554_p2;
                end if;
            end if; 
        end if;
    end process;

    r_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    r_fu_100 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1203_pp0_iter1_reg = ap_const_lv1_0))) then 
                    r_fu_100 <= select_ln97_25_fu_524_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_1203_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln100_1_reg_1274 <= add_ln100_1_fu_548_p2;
                add_ln97_2_reg_1262 <= add_ln97_2_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln100_1_reg_1274_pp0_iter10_reg <= add_ln100_1_reg_1274_pp0_iter9_reg;
                add_ln100_1_reg_1274_pp0_iter11_reg <= add_ln100_1_reg_1274_pp0_iter10_reg;
                add_ln100_1_reg_1274_pp0_iter12_reg <= add_ln100_1_reg_1274_pp0_iter11_reg;
                add_ln100_1_reg_1274_pp0_iter13_reg <= add_ln100_1_reg_1274_pp0_iter12_reg;
                add_ln100_1_reg_1274_pp0_iter14_reg <= add_ln100_1_reg_1274_pp0_iter13_reg;
                add_ln100_1_reg_1274_pp0_iter15_reg <= add_ln100_1_reg_1274_pp0_iter14_reg;
                add_ln100_1_reg_1274_pp0_iter3_reg <= add_ln100_1_reg_1274;
                add_ln100_1_reg_1274_pp0_iter4_reg <= add_ln100_1_reg_1274_pp0_iter3_reg;
                add_ln100_1_reg_1274_pp0_iter5_reg <= add_ln100_1_reg_1274_pp0_iter4_reg;
                add_ln100_1_reg_1274_pp0_iter6_reg <= add_ln100_1_reg_1274_pp0_iter5_reg;
                add_ln100_1_reg_1274_pp0_iter7_reg <= add_ln100_1_reg_1274_pp0_iter6_reg;
                add_ln100_1_reg_1274_pp0_iter8_reg <= add_ln100_1_reg_1274_pp0_iter7_reg;
                add_ln100_1_reg_1274_pp0_iter9_reg <= add_ln100_1_reg_1274_pp0_iter8_reg;
                and_ln97_reg_1239_pp0_iter2_reg <= and_ln97_reg_1239;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln96_reg_1203_pp0_iter2_reg <= icmp_ln96_reg_1203_pp0_iter1_reg;
                icmp_ln97_reg_1207_pp0_iter2_reg <= icmp_ln97_reg_1207_pp0_iter1_reg;
                in_data_load_4_reg_1318_pp0_iter6_reg <= in_data_load_4_reg_1318;
                in_data_load_4_reg_1318_pp0_iter7_reg <= in_data_load_4_reg_1318_pp0_iter6_reg;
                in_data_load_4_reg_1318_pp0_iter8_reg <= in_data_load_4_reg_1318_pp0_iter7_reg;
                in_data_load_5_reg_1325_pp0_iter10_reg <= in_data_load_5_reg_1325_pp0_iter9_reg;
                in_data_load_5_reg_1325_pp0_iter6_reg <= in_data_load_5_reg_1325;
                in_data_load_5_reg_1325_pp0_iter7_reg <= in_data_load_5_reg_1325_pp0_iter6_reg;
                in_data_load_5_reg_1325_pp0_iter8_reg <= in_data_load_5_reg_1325_pp0_iter7_reg;
                in_data_load_5_reg_1325_pp0_iter9_reg <= in_data_load_5_reg_1325_pp0_iter8_reg;
                in_data_load_6_reg_1332_pp0_iter10_reg <= in_data_load_6_reg_1332_pp0_iter9_reg;
                in_data_load_6_reg_1332_pp0_iter11_reg <= in_data_load_6_reg_1332_pp0_iter10_reg;
                in_data_load_6_reg_1332_pp0_iter12_reg <= in_data_load_6_reg_1332_pp0_iter11_reg;
                in_data_load_6_reg_1332_pp0_iter6_reg <= in_data_load_6_reg_1332;
                in_data_load_6_reg_1332_pp0_iter7_reg <= in_data_load_6_reg_1332_pp0_iter6_reg;
                in_data_load_6_reg_1332_pp0_iter8_reg <= in_data_load_6_reg_1332_pp0_iter7_reg;
                in_data_load_6_reg_1332_pp0_iter9_reg <= in_data_load_6_reg_1332_pp0_iter8_reg;
                in_data_load_reg_1311_pp0_iter6_reg <= in_data_load_reg_1311;
                r_2_reg_1255 <= r_fu_100;
                select_ln107_4_reg_1346 <= select_ln107_4_fu_903_p3;
                select_ln107_4_reg_1346_pp0_iter10_reg <= select_ln107_4_reg_1346;
                select_ln107_5_reg_1353 <= select_ln107_5_fu_991_p3;
                select_ln107_5_reg_1353_pp0_iter12_reg <= select_ln107_5_reg_1353;
                select_ln107_6_reg_1360 <= select_ln107_6_fu_1079_p3;
                select_ln107_6_reg_1360_pp0_iter14_reg <= select_ln107_6_reg_1360;
                select_ln107_reg_1339 <= select_ln107_fu_814_p3;
                select_ln107_reg_1339_pp0_iter8_reg <= select_ln107_reg_1339;
                select_ln113_reg_1367 <= select_ln113_fu_1126_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_1203_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln106_2_reg_1285 <= add_ln106_2_fu_739_p2;
                add_ln106_reg_1279 <= add_ln106_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_reg_1203 = ap_const_lv1_0))) then
                and_ln97_reg_1239 <= and_ln97_fu_426_p2;
                k_load_reg_1234 <= ap_sig_allocacmp_k_load;
                select_ln85_2_reg_1249 <= select_ln85_2_fu_458_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_1196 <= empty_fu_245_p1;
                icmp_ln96_reg_1203 <= icmp_ln96_fu_249_p2;
                icmp_ln96_reg_1203_pp0_iter1_reg <= icmp_ln96_reg_1203;
                icmp_ln97_reg_1207_pp0_iter1_reg <= icmp_ln97_reg_1207;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_249_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_93_reg_1222 <= empty_93_fu_276_p1;
                icmp_ln97_reg_1207 <= icmp_ln97_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                in_data_load_4_reg_1318 <= in_data_q2;
                in_data_load_5_reg_1325 <= in_data_q1;
                in_data_load_6_reg_1332 <= in_data_q0;
                in_data_load_reg_1311 <= in_data_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln100_1_fu_548_p2 <= std_logic_vector(unsigned(zext_ln100_1_fu_544_p1) + unsigned(p_mid2_fu_517_p3));
    add_ln100_fu_539_p2 <= std_logic_vector(unsigned(select_ln85_2_reg_1249) + unsigned(zext_ln100_fu_535_p1));
    add_ln106_2_fu_739_p2 <= std_logic_vector(unsigned(add_ln106_4_fu_734_p2) + unsigned(select_ln85_6_cast_fu_719_p1));
    add_ln106_3_fu_723_p2 <= std_logic_vector(unsigned(select_ln85_3_cast_fu_658_p1) + unsigned(grp_fu_1137_p3));
    add_ln106_4_fu_734_p2 <= std_logic_vector(unsigned(select_ln85_5_cast_fu_700_p1) + unsigned(grp_fu_1137_p3));
    add_ln106_fu_728_p2 <= std_logic_vector(unsigned(add_ln106_3_fu_723_p2) + unsigned(select_ln85_4_cast_fu_676_p1));
    add_ln96_2_fu_255_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten72_load) + unsigned(ap_const_lv9_1));
    add_ln96_fu_264_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ch_2) + unsigned(ap_const_lv5_1));
    add_ln97_2_fu_492_p2 <= std_logic_vector(unsigned(select_ln97_15_fu_485_p3) + unsigned(ap_const_lv4_2));
    add_ln97_3_fu_292_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln97_fu_432_p2 <= std_logic_vector(unsigned(select_ln97_fu_361_p3) + unsigned(ap_const_lv3_1));
    add_ln98_2_fu_560_p2 <= std_logic_vector(unsigned(select_ln85_1_fu_509_p3) + unsigned(ap_const_lv4_2));
    add_ln98_fu_554_p2 <= std_logic_vector(unsigned(select_ln85_fu_502_p3) + unsigned(ap_const_lv3_1));
    and_ln107_10_fu_985_p2 <= (grp_fu_256_p_dout0 and and_ln107_9_fu_979_p2);
    and_ln107_11_fu_1067_p2 <= (or_ln107_12_fu_1061_p2 and or_ln107_11_fu_1043_p2);
    and_ln107_12_fu_1073_p2 <= (grp_fu_260_p_dout0 and and_ln107_11_fu_1067_p2);
    and_ln107_7_fu_891_p2 <= (or_ln107_8_fu_885_p2 and or_ln107_7_fu_867_p2);
    and_ln107_8_fu_897_p2 <= (grp_fu_252_p_dout0 and and_ln107_7_fu_891_p2);
    and_ln107_9_fu_979_p2 <= (or_ln107_9_fu_955_p2 and or_ln107_10_fu_973_p2);
    and_ln107_fu_808_p2 <= (or_ln107_fu_802_p2 and grp_fu_248_p_dout0);
    and_ln113_fu_1120_p2 <= (or_ln113_fu_1114_p2 and grp_fu_264_p_dout0);
    and_ln97_fu_426_p2 <= (xor_ln97_fu_415_p2 and icmp_ln98_fu_420_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln96_fu_249_p2)
    begin
        if (((icmp_ln96_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln96_reg_1203_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_1203_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ch_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ch_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ch_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_ch_2 <= ch_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten72_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten72_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten72_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten72_load <= indvar_flatten72_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln96_reg_1203_pp0_iter1_reg, ap_block_pp0_stage0, k_fu_96, add_ln98_fu_554_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_1203_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_k_load <= add_ln98_fu_554_p2;
        else 
            ap_sig_allocacmp_k_load <= k_fu_96;
        end if; 
    end process;

    bitcast_ln107_10_fu_926_p1 <= in_data_load_5_reg_1325_pp0_iter10_reg;
    bitcast_ln107_11_fu_997_p1 <= select_ln107_5_reg_1353_pp0_iter12_reg;
    bitcast_ln107_12_fu_1014_p1 <= in_data_load_6_reg_1332_pp0_iter12_reg;
    bitcast_ln107_7_fu_821_p1 <= select_ln107_reg_1339_pp0_iter8_reg;
    bitcast_ln107_8_fu_838_p1 <= in_data_load_4_reg_1318_pp0_iter8_reg;
    bitcast_ln107_9_fu_909_p1 <= select_ln107_4_reg_1346_pp0_iter10_reg;
    bitcast_ln107_fu_773_p1 <= in_data_load_reg_1311_pp0_iter6_reg;
    bitcast_ln113_fu_1085_p1 <= select_ln107_6_reg_1360_pp0_iter14_reg;
    ch_cast_cast5_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_1196),5));
    empty_90_fu_352_p2 <= std_logic_vector(unsigned(tmp_cast_fu_348_p1) + unsigned(p_cast_fu_334_p1));
    empty_91_fu_595_p2 <= (r_2_reg_1255 or ap_const_lv4_1);
    empty_93_fu_276_p1 <= add_ln96_fu_264_p2(4 - 1 downto 0);
    empty_fu_245_p1 <= ap_sig_allocacmp_ch_2(4 - 1 downto 0);
    g_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_fu_104),5));
    g_cast_mid1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_fu_432_p2),5));
    grp_fu_1137_p0 <= grp_fu_1137_p00(5 - 1 downto 0);
    grp_fu_1137_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_18_fu_280_p3),11));
    grp_fu_1137_p1 <= ap_const_lv11_64(7 - 1 downto 0);
    grp_fu_1137_p2 <= grp_fu_1137_p20(4 - 1 downto 0);
    grp_fu_1137_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_1_fu_509_p3),11));
    grp_fu_248_p_ce <= ap_const_logic_1;
    grp_fu_248_p_din0 <= in_data_load_reg_1311;
    grp_fu_248_p_din1 <= ap_const_lv32_C37F0000;
    grp_fu_248_p_opcode <= ap_const_lv5_2;
    grp_fu_252_p_ce <= ap_const_logic_1;
    grp_fu_252_p_din0 <= select_ln107_reg_1339;
    grp_fu_252_p_din1 <= in_data_load_4_reg_1318_pp0_iter7_reg;
    grp_fu_252_p_opcode <= ap_const_lv5_4;
    grp_fu_256_p_ce <= ap_const_logic_1;
    grp_fu_256_p_din0 <= select_ln107_4_reg_1346;
    grp_fu_256_p_din1 <= in_data_load_5_reg_1325_pp0_iter9_reg;
    grp_fu_256_p_opcode <= ap_const_lv5_4;
    grp_fu_260_p_ce <= ap_const_logic_1;
    grp_fu_260_p_din0 <= select_ln107_5_reg_1353;
    grp_fu_260_p_din1 <= in_data_load_6_reg_1332_pp0_iter11_reg;
    grp_fu_260_p_opcode <= ap_const_lv5_4;
    grp_fu_264_p_ce <= ap_const_logic_1;
    grp_fu_264_p_din0 <= select_ln107_6_reg_1360;
    grp_fu_264_p_din1 <= ap_const_lv32_0;
    grp_fu_264_p_opcode <= ap_const_lv5_5;
    icmp_ln107_14_fu_796_p2 <= "1" when (trunc_ln107_fu_786_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_15_fu_855_p2 <= "0" when (tmp_13_fu_824_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_16_fu_861_p2 <= "1" when (trunc_ln107_7_fu_834_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_17_fu_873_p2 <= "0" when (tmp_14_fu_841_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_18_fu_879_p2 <= "1" when (trunc_ln107_8_fu_851_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_19_fu_943_p2 <= "0" when (tmp_16_fu_912_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_20_fu_949_p2 <= "1" when (trunc_ln107_9_fu_922_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_21_fu_961_p2 <= "0" when (tmp_17_fu_929_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_22_fu_967_p2 <= "1" when (trunc_ln107_10_fu_939_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_23_fu_1031_p2 <= "0" when (tmp_19_fu_1000_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_24_fu_1037_p2 <= "1" when (trunc_ln107_11_fu_1010_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_25_fu_1049_p2 <= "0" when (tmp_20_fu_1017_p4 = ap_const_lv8_FF) else "1";
    icmp_ln107_26_fu_1055_p2 <= "1" when (trunc_ln107_12_fu_1027_p1 = ap_const_lv23_0) else "0";
    icmp_ln107_fu_790_p2 <= "0" when (tmp_s_fu_776_p4 = ap_const_lv8_FF) else "1";
    icmp_ln113_2_fu_1108_p2 <= "1" when (trunc_ln113_fu_1098_p1 = ap_const_lv23_0) else "0";
    icmp_ln113_fu_1102_p2 <= "0" when (tmp_22_fu_1088_p4 = ap_const_lv8_FF) else "1";
    icmp_ln96_fu_249_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten72_load = ap_const_lv9_190) else "0";
    icmp_ln97_fu_270_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_19) else "0";
    icmp_ln98_fu_420_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv3_5) else "0";
    in_data_address0 <= zext_ln106_7_fu_768_p1(11 - 1 downto 0);
    in_data_address1 <= zext_ln106_6_fu_759_p1(11 - 1 downto 0);
    in_data_address2 <= zext_ln106_5_fu_754_p1(11 - 1 downto 0);
    in_data_address3 <= zext_ln106_fu_745_p1(11 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce1 <= ap_const_logic_1;
        else 
            in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce2 <= ap_const_logic_1;
        else 
            in_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_data_ce3 <= ap_const_logic_1;
        else 
            in_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln106_2_fu_763_p2 <= (ap_const_lv11_1 or add_ln106_2_reg_1285);
    or_ln106_fu_749_p2 <= (ap_const_lv11_1 or add_ln106_reg_1279);
    or_ln107_10_fu_973_p2 <= (icmp_ln107_22_fu_967_p2 or icmp_ln107_21_fu_961_p2);
    or_ln107_11_fu_1043_p2 <= (icmp_ln107_24_fu_1037_p2 or icmp_ln107_23_fu_1031_p2);
    or_ln107_12_fu_1061_p2 <= (icmp_ln107_26_fu_1055_p2 or icmp_ln107_25_fu_1049_p2);
    or_ln107_7_fu_867_p2 <= (icmp_ln107_16_fu_861_p2 or icmp_ln107_15_fu_855_p2);
    or_ln107_8_fu_885_p2 <= (icmp_ln107_18_fu_879_p2 or icmp_ln107_17_fu_873_p2);
    or_ln107_9_fu_955_p2 <= (icmp_ln107_20_fu_949_p2 or icmp_ln107_19_fu_943_p2);
    or_ln107_fu_802_p2 <= (icmp_ln107_fu_790_p2 or icmp_ln107_14_fu_796_p2);
    or_ln113_fu_1114_p2 <= (icmp_ln113_fu_1102_p2 or icmp_ln113_2_fu_1108_p2);
    or_ln85_fu_498_p2 <= (icmp_ln97_reg_1207_pp0_iter1_reg or and_ln97_reg_1239);
    out_data_address0 <= zext_ln100_2_fu_1133_p1(9 - 1 downto 0);

    out_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            out_data_ce0 <= ap_const_logic_1;
        else 
            out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_d0 <= select_ln113_reg_1367;

    out_data_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            out_data_we0 <= ap_const_logic_1;
        else 
            out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_327_p3),7));
    p_cast_mid1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_377_p3),7));
    p_mid114_fu_680_p2 <= (ap_const_lv4_1 or add_ln97_2_reg_1262);
    p_mid138_fu_402_p2 <= std_logic_vector(unsigned(tmp_cast_mid136_fu_399_p1) + unsigned(p_cast_mid1_fu_384_p1));
    p_mid1_fu_452_p2 <= std_logic_vector(unsigned(tmp_cast_mid1_fu_448_p1) + unsigned(zext_ln97_3_fu_395_p1));
    p_mid2_fu_517_p3 <= (select_ln85_2_reg_1249 & ap_const_lv2_0);
    p_mid3_fu_644_p3 <= (add_ln97_2_reg_1262 & ap_const_lv1_0);
    p_mid4_fu_662_p3 <= (add_ln97_2_reg_1262 & ap_const_lv3_0);
    p_mid5_fu_685_p3 <= (p_mid114_fu_680_p2 & ap_const_lv1_0);
    p_mid6_fu_704_p3 <= (p_mid114_fu_680_p2 & ap_const_lv3_0);
    p_mid_fu_377_p3 <= (empty_93_reg_1222 & ap_const_lv2_0);
    select_ln107_4_fu_903_p3 <= 
        in_data_load_4_reg_1318_pp0_iter8_reg when (and_ln107_8_fu_897_p2(0) = '1') else 
        select_ln107_reg_1339_pp0_iter8_reg;
    select_ln107_5_fu_991_p3 <= 
        in_data_load_5_reg_1325_pp0_iter10_reg when (and_ln107_10_fu_985_p2(0) = '1') else 
        select_ln107_4_reg_1346_pp0_iter10_reg;
    select_ln107_6_fu_1079_p3 <= 
        in_data_load_6_reg_1332_pp0_iter12_reg when (and_ln107_12_fu_1073_p2(0) = '1') else 
        select_ln107_5_reg_1353_pp0_iter12_reg;
    select_ln107_fu_814_p3 <= 
        in_data_load_reg_1311_pp0_iter6_reg when (and_ln107_fu_808_p2(0) = '1') else 
        ap_const_lv32_C37F0000;
    select_ln113_fu_1126_p3 <= 
        ap_const_lv32_0 when (and_ln113_fu_1120_p2(0) = '1') else 
        select_ln107_6_reg_1360_pp0_iter14_reg;
    select_ln85_1_fu_509_p3 <= 
        ap_const_lv4_0 when (or_ln85_fu_498_p2(0) = '1') else 
        c_fu_92;
    select_ln85_2_fu_458_p3 <= 
        p_mid1_fu_452_p2 when (and_ln97_fu_426_p2(0) = '1') else 
        select_ln97_19_fu_408_p3;
    select_ln85_3_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_3_fu_651_p3),11));
    select_ln85_3_fu_651_p3 <= 
        p_mid3_fu_644_p3 when (and_ln97_reg_1239_pp0_iter2_reg(0) = '1') else 
        select_ln97_20_fu_616_p3;
    select_ln85_4_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_4_fu_669_p3),11));
    select_ln85_4_fu_669_p3 <= 
        p_mid4_fu_662_p3 when (and_ln97_reg_1239_pp0_iter2_reg(0) = '1') else 
        select_ln97_21_fu_623_p3;
    select_ln85_5_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_5_fu_693_p3),11));
    select_ln85_5_fu_693_p3 <= 
        p_mid5_fu_685_p3 when (and_ln97_reg_1239_pp0_iter2_reg(0) = '1') else 
        select_ln97_22_fu_630_p3;
    select_ln85_6_cast_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_6_fu_712_p3),11));
    select_ln85_6_fu_712_p3 <= 
        p_mid6_fu_704_p3 when (and_ln97_reg_1239_pp0_iter2_reg(0) = '1') else 
        select_ln97_23_fu_637_p3;
    select_ln85_fu_502_p3 <= 
        ap_const_lv3_0 when (or_ln85_fu_498_p2(0) = '1') else 
        k_load_reg_1234;
    select_ln97_15_fu_485_p3 <= 
        ap_const_lv4_0 when (icmp_ln97_reg_1207_pp0_iter1_reg(0) = '1') else 
        r_fu_100;
    select_ln97_16_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_16_fu_368_p3),5));
    select_ln97_16_fu_368_p3 <= 
        empty_93_reg_1222 when (icmp_ln97_reg_1207(0) = '1') else 
        empty_reg_1196;
    select_ln97_17_fu_388_p3 <= 
        p_mid_fu_377_p3 when (icmp_ln97_reg_1207(0) = '1') else 
        tmp_5_fu_327_p3;
    select_ln97_18_fu_280_p3 <= 
        add_ln96_fu_264_p2 when (icmp_ln97_fu_270_p2(0) = '1') else 
        ap_sig_allocacmp_ch_2;
    select_ln97_19_fu_408_p3 <= 
        p_mid138_fu_402_p2 when (icmp_ln97_reg_1207(0) = '1') else 
        empty_90_fu_352_p2;
    select_ln97_20_fu_616_p3 <= 
        ap_const_lv5_0 when (icmp_ln97_reg_1207_pp0_iter2_reg(0) = '1') else 
        tmp_6_fu_581_p3;
    select_ln97_21_fu_623_p3 <= 
        ap_const_lv7_0 when (icmp_ln97_reg_1207_pp0_iter2_reg(0) = '1') else 
        tmp_7_fu_588_p3;
    select_ln97_22_fu_630_p3 <= 
        ap_const_lv5_2 when (icmp_ln97_reg_1207_pp0_iter2_reg(0) = '1') else 
        tmp_8_fu_600_p3;
    select_ln97_23_fu_637_p3 <= 
        ap_const_lv7_8 when (icmp_ln97_reg_1207_pp0_iter2_reg(0) = '1') else 
        tmp_9_fu_608_p3;
    select_ln97_24_fu_466_p3 <= 
        add_ln97_fu_432_p2 when (and_ln97_fu_426_p2(0) = '1') else 
        select_ln97_fu_361_p3;
    select_ln97_25_fu_524_p3 <= 
        add_ln97_2_fu_492_p2 when (and_ln97_reg_1239(0) = '1') else 
        select_ln97_15_fu_485_p3;
    select_ln97_26_fu_298_p3 <= 
        ap_const_lv6_1 when (icmp_ln97_fu_270_p2(0) = '1') else 
        add_ln97_3_fu_292_p2;
    select_ln97_fu_361_p3 <= 
        ap_const_lv3_0 when (icmp_ln97_reg_1207(0) = '1') else 
        g_fu_104;
    tmp_13_fu_824_p4 <= bitcast_ln107_7_fu_821_p1(30 downto 23);
    tmp_14_fu_841_p4 <= bitcast_ln107_8_fu_838_p1(30 downto 23);
    tmp_16_fu_912_p4 <= bitcast_ln107_9_fu_909_p1(30 downto 23);
    tmp_17_fu_929_p4 <= bitcast_ln107_10_fu_926_p1(30 downto 23);
    tmp_19_fu_1000_p4 <= bitcast_ln107_11_fu_997_p1(30 downto 23);
    tmp_20_fu_1017_p4 <= bitcast_ln107_12_fu_1014_p1(30 downto 23);
    tmp_22_fu_1088_p4 <= bitcast_ln113_fu_1085_p1(30 downto 23);
    tmp_5_fu_327_p3 <= (empty_reg_1196 & ap_const_lv2_0);
    tmp_6_fu_581_p3 <= (r_2_reg_1255 & ap_const_lv1_0);
    tmp_7_fu_588_p3 <= (r_2_reg_1255 & ap_const_lv3_0);
    tmp_8_fu_600_p3 <= (empty_91_fu_595_p2 & ap_const_lv1_0);
    tmp_9_fu_608_p3 <= (empty_91_fu_595_p2 & ap_const_lv3_0);
    tmp_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_342_p2),7));
    tmp_cast_mid136_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_93_reg_1222),7));
    tmp_cast_mid1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid1_fu_442_p2),7));
    tmp_fu_342_p2 <= std_logic_vector(unsigned(ch_cast_cast5_fu_324_p1) + unsigned(g_cast_fu_338_p1));
    tmp_mid1_fu_442_p2 <= std_logic_vector(unsigned(select_ln97_16_cast_fu_373_p1) + unsigned(g_cast_mid1_fu_438_p1));
    tmp_s_fu_776_p4 <= bitcast_ln107_fu_773_p1(30 downto 23);
    trunc_ln107_10_fu_939_p1 <= bitcast_ln107_10_fu_926_p1(23 - 1 downto 0);
    trunc_ln107_11_fu_1010_p1 <= bitcast_ln107_11_fu_997_p1(23 - 1 downto 0);
    trunc_ln107_12_fu_1027_p1 <= bitcast_ln107_12_fu_1014_p1(23 - 1 downto 0);
    trunc_ln107_7_fu_834_p1 <= bitcast_ln107_7_fu_821_p1(23 - 1 downto 0);
    trunc_ln107_8_fu_851_p1 <= bitcast_ln107_8_fu_838_p1(23 - 1 downto 0);
    trunc_ln107_9_fu_922_p1 <= bitcast_ln107_9_fu_909_p1(23 - 1 downto 0);
    trunc_ln107_fu_786_p1 <= bitcast_ln107_fu_773_p1(23 - 1 downto 0);
    trunc_ln113_fu_1098_p1 <= bitcast_ln113_fu_1085_p1(23 - 1 downto 0);
    xor_ln97_fu_415_p2 <= (icmp_ln97_reg_1207 xor ap_const_lv1_1);
    zext_ln100_1_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_fu_539_p2),9));
    zext_ln100_2_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_1_reg_1274_pp0_iter15_reg),32));
    zext_ln100_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_fu_502_p3),7));
    zext_ln106_5_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln106_fu_749_p2),32));
    zext_ln106_6_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_2_reg_1285),32));
    zext_ln106_7_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln106_2_fu_763_p2),32));
    zext_ln106_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_reg_1279),32));
    zext_ln97_3_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_17_fu_388_p3),7));
end behav;
