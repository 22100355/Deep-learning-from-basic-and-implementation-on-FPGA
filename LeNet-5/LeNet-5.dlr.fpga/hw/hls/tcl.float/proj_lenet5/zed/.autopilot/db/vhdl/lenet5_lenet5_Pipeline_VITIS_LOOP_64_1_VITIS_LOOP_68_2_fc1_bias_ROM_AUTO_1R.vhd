-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_2_fc1_bias_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 120
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_2_fc1_bias_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010000000010010110110100", 
    1 => "10111011110100011000001100111100", 
    2 => "10111100000001001111000100100111", 
    3 => "00111100000011010110111100011000", 
    4 => "10111011011011100110100110000110", 
    5 => "10111011101001011010111000101111", 
    6 => "00111100100101010111111000110001", 
    7 => "10111101000101000001000011000111", 
    8 => "10111100011111111111010110010100", 
    9 => "00111100100011101001100000101110", 
    10 => "10111101001011001010111111010101", 
    11 => "00111101001000010100011100111110", 
    12 => "00111100100111000010010010001010", 
    13 => "00111100011000001001101010110100", 
    14 => "00111100111011011101010100111011", 
    15 => "10111100010100101000111111011111", 
    16 => "00111101000100101100001000010111", 
    17 => "10111101010110111000011001111011", 
    18 => "10111101010001000111100000110011", 
    19 => "10111101000010001111101001110110", 
    20 => "00111101001000100111111100101010", 
    21 => "10111101000111011101000000010000", 
    22 => "00111100010011010111010101111110", 
    23 => "00111100100101000010010001000111", 
    24 => "10111100011001101001110111010001", 
    25 => "00111100110100011101101111011110", 
    26 => "10111101000011110011011001011000", 
    27 => "00111100101110101101010111011001", 
    28 => "10111011001111000010110001101100", 
    29 => "00111100011011001101011110100000", 
    30 => "10111100110010001001111011011011", 
    31 => "00111101010100101101111010101110", 
    32 => "00111101000000111010000011001100", 
    33 => "00111100110111001000001011011000", 
    34 => "10111011100111000110111001011110", 
    35 => "10111101000100110010010000011100", 
    36 => "00111100011001100111111001010000", 
    37 => "10111100100110000010011001001001", 
    38 => "00111011011100100000011011101110", 
    39 => "10111100111110110010001100101101", 
    40 => "00111101000111011100100000110110", 
    41 => "00111011000000110011001100111011", 
    42 => "00111101011111001010011111110000", 
    43 => "10111101000001111011001001111011", 
    44 => "10111101000110010011111010111101", 
    45 => "10111100010111111100010111100111", 
    46 => "00111100101001111011000001010100", 
    47 => "00111100111000001111101100110101", 
    48 => "10111100011100100101001100100111", 
    49 => "10111101000001000010111101011100", 
    50 => "00111100101011100111010011110110", 
    51 => "10111100010110111111011111011110", 
    52 => "00111100001001000100111011110100", 
    53 => "10111101000110100010101111000010", 
    54 => "10111101000110011000111111100101", 
    55 => "00111101001111101111000100011011", 
    56 => "10111100100101000111100100011101", 
    57 => "00111101001111000111111111011001", 
    58 => "10111011101101000000110101011000", 
    59 => "00111100111101101100111100110111", 
    60 => "10111101001101011101001101010010", 
    61 => "10111100101011111101101110100001", 
    62 => "10111100100101000000011010001111", 
    63 => "10111100100011000111000000011011", 
    64 => "10111100101110001000111011110000", 
    65 => "00111101001101010001101010101011", 
    66 => "00111010110001100010001101110101", 
    67 => "10111100100111000101110001001110", 
    68 => "10111100101111011110001110000001", 
    69 => "00111101000110001110000101111111", 
    70 => "10111101000001011101101110100001", 
    71 => "10111101010001011111111010100001", 
    72 => "10111100110001000011001100000101", 
    73 => "10111101001100011010111011111011", 
    74 => "10111100101000111111010101011100", 
    75 => "00111101011000101101100010111101", 
    76 => "10111100110100001010110001011000", 
    77 => "10111100000100100011101110100100", 
    78 => "10111100011010000001010001110001", 
    79 => "00111101000011111000001000011101", 
    80 => "10111100111110100001010010111111", 
    81 => "10111100110011011110101011011111", 
    82 => "00111101000001010110110011011000", 
    83 => "00111100111110010110101000111111", 
    84 => "10111011010110100011001110000011", 
    85 => "00111101010010000100111001011100", 
    86 => "10111101001111001000101111011101", 
    87 => "10111100101001001001010001100111", 
    88 => "10111100100001111110001100101101", 
    89 => "10111100101011110000010010011010", 
    90 => "00111011010010001110010110000010", 
    91 => "10111100111110000110110001100011", 
    92 => "10111010100111111011001100101101", 
    93 => "00111100001010111000010001001001", 
    94 => "00111100111101000001000110011011", 
    95 => "00111101001110001000011111011010", 
    96 => "00111100111101001000001100100000", 
    97 => "00111100110000100000001110111101", 
    98 => "00111101010010100111111100001101", 
    99 => "10111101000010101011001100010100", 
    100 => "00111100100110101111111001000010", 
    101 => "00111100111111110101111001110000", 
    102 => "10111001101100000001101110001100", 
    103 => "00111100110100001110001101100110", 
    104 => "10111100000011000011110011111110", 
    105 => "10111100100011110000000110110001", 
    106 => "10111100010110111001001101011110", 
    107 => "00111101000000010101110011000000", 
    108 => "00111101000110111011011000101100", 
    109 => "00111100101010001010110001110100", 
    110 => "10111101010000110010000000010010", 
    111 => "10111011010001101101000111101101", 
    112 => "10111011010100100011101101001111", 
    113 => "10111100111001001000100100101100", 
    114 => "00111100111011110000101011011010", 
    115 => "10111101001001101110010100000101", 
    116 => "10111101000111111000101100011001", 
    117 => "10111100101100101010111011011111", 
    118 => "10111100000000100001100100001100", 
    119 => "00111100101101010101101010010101" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

