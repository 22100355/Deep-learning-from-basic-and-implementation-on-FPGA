-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_26_fc2_bias_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 84
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet5_lenet5_Pipeline_VITIS_LOOP_64_1_VITIS_LOOP_68_26_fc2_bias_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001101000000000010011011", 
    1 => "10111100101110000100101110001000", 
    2 => "10111101000000100111000011101011", 
    3 => "10111101001110110011100001100010", 
    4 => "10111100110111101011010011000101", 
    5 => "00111101011111100000001101011111", 
    6 => "10111101100001011100101111110000", 
    7 => "10111100001111001110000110000000", 
    8 => "10111101101001001100011000011001", 
    9 => "00111101101100001011001111010111", 
    10 => "10111101101100100110101101101101", 
    11 => "10111101010110010000000111001000", 
    12 => "00111100001111011111101100101010", 
    13 => "00111101000010101000100101111001", 
    14 => "00111101101100011001110110000000", 
    15 => "00111101100110011100010000100100", 
    16 => "10111101110101011100111010111111", 
    17 => "00111101110101101000100001011000", 
    18 => "10111101101111111111111101110001", 
    19 => "10111101001101100010110011001110", 
    20 => "10111101010010110001001101000011", 
    21 => "00111101110110001111101010100011", 
    22 => "00111101000011010001110101101000", 
    23 => "10111100000101101000010000001011", 
    24 => "00111101001011010111011111111111", 
    25 => "00111101011100100100010011011011", 
    26 => "00111101100001100101101101010001", 
    27 => "00111100011000010001011100111011", 
    28 => "00111101101011001011110011101010", 
    29 => "10111101001100011001010011000010", 
    30 => "10111101011101111101001100001101", 
    31 => "10111101011000100110011011110110", 
    32 => "10111101100010101100110001001000", 
    33 => "10111101010100001010010111100000", 
    34 => "00111100111010011000011000101011", 
    35 => "10111100111100010100111011110101", 
    36 => "00111101101011110001011011001111", 
    37 => "10111011011010110111100000010000", 
    38 => "00111010000101011000010001011000", 
    39 => "10111101100001101011101101110100", 
    40 => "00111101010101101111000110100000", 
    41 => "00111101100001000001001100101010", 
    42 => "00111010101111000110111010110101", 
    43 => "10111101000111110011111010101001", 
    44 => "10111101100000111101000010101110", 
    45 => "10111101101011101110010001110111", 
    46 => "00111101001010010010101101010111", 
    47 => "00111101101110110110110011001000", 
    48 => "10111101010111100110011110000001", 
    49 => "10111101000010011111001110101100", 
    50 => "00111011111110100010001000100001", 
    51 => "00111101110101001011101111000010", 
    52 => "10111101100000010001010111100110", 
    53 => "00111101100111000101011000000010", 
    54 => "00111101100100011011100101110011", 
    55 => "00111101110000010110000101000100", 
    56 => "00111101110011100001001110011111", 
    57 => "10111100101011100010101001000000", 
    58 => "10111101101100111110011111011000", 
    59 => "10111101101011100110001101001111", 
    60 => "10111101011011111101000111000011", 
    61 => "10111101100010001101010011111000", 
    62 => "10111101100010111010111111101010", 
    63 => "10111101100001010101110001010000", 
    64 => "00111011110111111000010010101010", 
    65 => "10111010010011001111110111011111", 
    66 => "00111101011001001111111010011110", 
    67 => "00111101001000000011101001101011", 
    68 => "10111101000011010001101111010000", 
    69 => "00111101011111011111100100101101", 
    70 => "10111101010110101111001110101011", 
    71 => "10111100111011100010111110010011", 
    72 => "00111100001111010110010101010001", 
    73 => "10111100111100100110011001110000", 
    74 => "00111101100000011100111000000010", 
    75 => "10111101010110000101001111000101", 
    76 => "00111101100011110111011010111000", 
    77 => "00111101100001101111010110110000", 
    78 => "00111011000010000010111010100001", 
    79 => "00111011100010011111010001110010", 
    80 => "10111101010001100110001110001001", 
    81 => "00111101101011000111011011001111", 
    82 => "10111100111010100100110001110110", 
    83 => "00111100111010001100001100100110" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

